/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */
import org.jetbrains.kwm.buildscripts.CompileRustTask
import org.jetbrains.kwm.buildscripts.DownloadJExtractTask
import org.jetbrains.kwm.buildscripts.GenerateJavaBindingsTask

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
}

group = "org.jetbrains"
version = "0.1-SNAPSHOT"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)
}

tasks.compileJava {
    options.compilerArgs = listOf("--enable-preview")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
}

publishing {
    publications {
        create<MavenPublication>("myLibrary") {
            from(components["java"])
        }
    }

    repositories {
        maven {
            name = "myRepo"
            url = uri(layout.buildDirectory.dir("repo"))
        }
    }
}

tasks.test {
    dependsOn(compileDebugKwmTask)

    // Use JUnit Platform for unit tests.
    jvmArgs("--enable-preview")
    environment("DYLD_LIBRARY_PATH", compileDebugKwmTask.map { it.libraryDirectory }) // TODO: add env for each OS
    useJUnitPlatform()
}

val compileDebugKwmTask = tasks.register<CompileRustTask>("compileNative") {
    crateName = "kwm-macos"
    rustProfile = "debug"
    nativeDirectory = layout.projectDirectory.dir("../native")
    headerFile = layout.buildDirectory.file("kwm-macos.h")
    libraryDirectory = layout.buildDirectory.dir("native/target")
}

val downloadJExtractTask = tasks.register<DownloadJExtractTask>("downloadJExtract") {
    slug = "22/6/openjdk-22-jextract+6-47_"
    jextractDirectory = layout.buildDirectory.dir("jextract")
}

val generateBindingsTask = tasks.register<GenerateJavaBindingsTask>("generateBindings") {
    dependsOn(downloadJExtractTask)

    jextractBinary = downloadJExtractTask.flatMap { it.jextractBinary }
    headerFile = compileDebugKwmTask.flatMap { it.headerFile }
    generatedSourcesDirectory = layout.projectDirectory.dir("src/main/java/org/jetbrains/kwm/macos/generated")
}

tasks.compileKotlin {
    dependsOn(generateBindingsTask)
}

tasks.compileJava {
    dependsOn(generateBindingsTask)
}

tasks.named<Jar>("sourcesJar") {
    dependsOn(generateBindingsTask)
}

// TODO: decide if this is needed, depending on how we package the native code
sourceSets.main {
    // redundant because we already wire `src/main/java`
    // java.srcDirs(generateBindingsTask.flatMap { it.generatedSources })
    resources.srcDirs(compileDebugKwmTask.map { it.libraryDirectory }) // parentFile because we need a directory
}

tasks.processResources {
    dependsOn(compileDebugKwmTask)
}
