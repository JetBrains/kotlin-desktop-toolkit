/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */
import org.jetbrains.desktop.buildscripts.CompileRustTask
import org.jetbrains.desktop.buildscripts.DownloadJExtractTask
import org.jetbrains.desktop.buildscripts.GenerateJavaBindingsTask
import org.jetbrains.desktop.buildscripts.KotlinDesktopToolkitAttributes
import org.jetbrains.desktop.buildscripts.KotlingDesktopToolkitArtifactType
import org.jetbrains.desktop.buildscripts.KotlingDesktopToolkitNativeProfile

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
}

group = "org.jetbrains"
version = (project.properties["version"] as? String)?.takeIf { it.isNotBlank() && it != "unspecified" } ?: "SNAPSHOT"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

tasks.compileJava {
    options.compilerArgs = listOf("--enable-preview")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
}

tasks.test {
    dependsOn(compileDebugDesktopToolkitTask)
    // Use JUnit Platform for unit tests.
    jvmArgs("--enable-preview")
    val nativeLibProvider = compileDebugDesktopToolkitTask.flatMap { it.libraryFile }.map { it.absolutePath }
    val logFile = layout.buildDirectory.file("test-logs/desktop_native.log")
    jvmArgumentProviders.add(
        CommandLineArgumentProvider {
            listOf(
                "-Dkdt.library.path=${nativeLibProvider.get()}",
                "-Dkdt.native.log.path=${logFile.get().asFile.absolutePath}",
            )
        },
    )
    useJUnitPlatform()
}

val compileDebugDesktopToolkitTask = tasks.register<CompileRustTask>("compileNative") {
    crateName = "desktop-macos"
    rustProfile = "dev"
    nativeDirectory = layout.projectDirectory.dir("../native")
}

val downloadJExtractTask = tasks.register<DownloadJExtractTask>("downloadJExtract") {
    slug = "22/6/openjdk-22-jextract+6-47"
    jextractDirectory = layout.buildDirectory.dir("jextract")
}

val nativeConsumable = configurations.consumable("nativeParts") {
    attributes {
        attribute(KotlinDesktopToolkitAttributes.TYPE, KotlingDesktopToolkitArtifactType.NATIVE_LIBRARY)
        attribute(KotlinDesktopToolkitAttributes.PROFILE, KotlingDesktopToolkitNativeProfile.DEBUG)
    }
}

artifacts.add(nativeConsumable.name, compileDebugDesktopToolkitTask.flatMap { it.libraryFile }) {
    builtBy(compileDebugDesktopToolkitTask) // redundant because of the flatMap usage above, but if you want to be sure you can specify that
}

val generateBindingsTask = tasks.register<GenerateJavaBindingsTask>("generateBindings") {
    dependsOn(downloadJExtractTask)
    dependsOn(compileDebugDesktopToolkitTask)

    jextractBinary = downloadJExtractTask.flatMap { it.jextractBinary }
    headerFile = compileDebugDesktopToolkitTask.flatMap { it.headerFile }
    packageName = "org.jetbrains.desktop.macos.generated"
    generatedSourcesDirectory = layout.buildDirectory.dir("generated/sources/jextract/main/java/")
}

tasks.compileKotlin {
    dependsOn(generateBindingsTask)
}

tasks.compileJava {
    dependsOn(generateBindingsTask)
}

tasks.named<Jar>("sourcesJar") {
    dependsOn(generateBindingsTask)
}

// TODO: decide if this is needed, depending on how we package the native code
sourceSets.main {
    java.srcDirs(generateBindingsTask.flatMap { it.generatedSourcesDirectory })
    resources.srcDirs(compileDebugDesktopToolkitTask.map { it.libraryDirectory }) // parentFile because we need a directory
}

tasks.processResources {
    dependsOn(compileDebugDesktopToolkitTask)
}

val spaceUsername: String? by project
val spacePassword: String? by project
publishing {
    publications {
        create<MavenPublication>("maven") {
            from(components["java"])
            pom {
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "IntellijDependencies"
            url = uri("https://packages.jetbrains.team/maven/p/ij/intellij-dependencies")
            credentials {
                username = spaceUsername
                password = spacePassword
            }
        }
    }
}
