// Generated by jextract

package org.jetbrains.kwm.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WindowFocusChangeEvent {
 *     WindowId window_id;
 *     bool is_key;
 *     bool is_main;
 * }
 * }
 */
public class WindowFocusChangeEvent {

    WindowFocusChangeEvent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        kwm_macos_h.C_LONG_LONG.withName("window_id"),
        kwm_macos_h.C_BOOL.withName("is_key"),
        kwm_macos_h.C_BOOL.withName("is_main"),
        MemoryLayout.paddingLayout(6)
    ).withName("WindowFocusChangeEvent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong window_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("window_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WindowId window_id
     * }
     */
    public static final OfLong window_id$layout() {
        return window_id$LAYOUT;
    }

    private static final long window_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WindowId window_id
     * }
     */
    public static final long window_id$offset() {
        return window_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WindowId window_id
     * }
     */
    public static long window_id(MemorySegment struct) {
        return struct.get(window_id$LAYOUT, window_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WindowId window_id
     * }
     */
    public static void window_id(MemorySegment struct, long fieldValue) {
        struct.set(window_id$LAYOUT, window_id$OFFSET, fieldValue);
    }

    private static final OfBoolean is_key$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_key
     * }
     */
    public static final OfBoolean is_key$layout() {
        return is_key$LAYOUT;
    }

    private static final long is_key$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_key
     * }
     */
    public static final long is_key$offset() {
        return is_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_key
     * }
     */
    public static boolean is_key(MemorySegment struct) {
        return struct.get(is_key$LAYOUT, is_key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_key
     * }
     */
    public static void is_key(MemorySegment struct, boolean fieldValue) {
        struct.set(is_key$LAYOUT, is_key$OFFSET, fieldValue);
    }

    private static final OfBoolean is_main$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_main"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_main
     * }
     */
    public static final OfBoolean is_main$layout() {
        return is_main$LAYOUT;
    }

    private static final long is_main$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_main
     * }
     */
    public static final long is_main$offset() {
        return is_main$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_main
     * }
     */
    public static boolean is_main(MemorySegment struct) {
        return struct.get(is_main$LAYOUT, is_main$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_main
     * }
     */
    public static void is_main(MemorySegment struct, boolean fieldValue) {
        struct.set(is_main$LAYOUT, is_main$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

