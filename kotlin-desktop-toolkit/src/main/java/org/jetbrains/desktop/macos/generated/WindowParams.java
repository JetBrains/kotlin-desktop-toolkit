// Generated by jextract

package org.jetbrains.desktop.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WindowParams {
 *     struct LogicalPoint origin;
 *     struct LogicalSize size;
 *     StrPtr title;
 *     bool is_resizable;
 *     bool is_closable;
 *     bool is_miniaturizable;
 *     bool is_full_screen_allowed;
 *     bool use_custom_titlebar;
 *     LogicalPixels titlebar_height;
 * }
 * }
 */
public class WindowParams {

    WindowParams() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        LogicalPoint.layout().withName("origin"),
        LogicalSize.layout().withName("size"),
        desktop_macos_h.C_POINTER.withName("title"),
        desktop_macos_h.C_BOOL.withName("is_resizable"),
        desktop_macos_h.C_BOOL.withName("is_closable"),
        desktop_macos_h.C_BOOL.withName("is_miniaturizable"),
        desktop_macos_h.C_BOOL.withName("is_full_screen_allowed"),
        desktop_macos_h.C_BOOL.withName("use_custom_titlebar"),
        MemoryLayout.paddingLayout(3),
        desktop_macos_h.C_DOUBLE.withName("titlebar_height")
    ).withName("WindowParams");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout origin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("origin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct LogicalPoint origin
     * }
     */
    public static final GroupLayout origin$layout() {
        return origin$LAYOUT;
    }

    private static final long origin$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct LogicalPoint origin
     * }
     */
    public static final long origin$offset() {
        return origin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct LogicalPoint origin
     * }
     */
    public static MemorySegment origin(MemorySegment struct) {
        return struct.asSlice(origin$OFFSET, origin$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct LogicalPoint origin
     * }
     */
    public static void origin(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, origin$OFFSET, origin$LAYOUT.byteSize());
    }

    private static final GroupLayout size$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct LogicalSize size
     * }
     */
    public static final GroupLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct LogicalSize size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct LogicalSize size
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.asSlice(size$OFFSET, size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct LogicalSize size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, size$OFFSET, size$LAYOUT.byteSize());
    }

    private static final AddressLayout title$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("title"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StrPtr title
     * }
     */
    public static final AddressLayout title$layout() {
        return title$LAYOUT;
    }

    private static final long title$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StrPtr title
     * }
     */
    public static final long title$offset() {
        return title$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StrPtr title
     * }
     */
    public static MemorySegment title(MemorySegment struct) {
        return struct.get(title$LAYOUT, title$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StrPtr title
     * }
     */
    public static void title(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(title$LAYOUT, title$OFFSET, fieldValue);
    }

    private static final OfBoolean is_resizable$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_resizable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_resizable
     * }
     */
    public static final OfBoolean is_resizable$layout() {
        return is_resizable$LAYOUT;
    }

    private static final long is_resizable$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_resizable
     * }
     */
    public static final long is_resizable$offset() {
        return is_resizable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_resizable
     * }
     */
    public static boolean is_resizable(MemorySegment struct) {
        return struct.get(is_resizable$LAYOUT, is_resizable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_resizable
     * }
     */
    public static void is_resizable(MemorySegment struct, boolean fieldValue) {
        struct.set(is_resizable$LAYOUT, is_resizable$OFFSET, fieldValue);
    }

    private static final OfBoolean is_closable$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_closable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_closable
     * }
     */
    public static final OfBoolean is_closable$layout() {
        return is_closable$LAYOUT;
    }

    private static final long is_closable$OFFSET = 41;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_closable
     * }
     */
    public static final long is_closable$offset() {
        return is_closable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_closable
     * }
     */
    public static boolean is_closable(MemorySegment struct) {
        return struct.get(is_closable$LAYOUT, is_closable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_closable
     * }
     */
    public static void is_closable(MemorySegment struct, boolean fieldValue) {
        struct.set(is_closable$LAYOUT, is_closable$OFFSET, fieldValue);
    }

    private static final OfBoolean is_miniaturizable$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_miniaturizable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_miniaturizable
     * }
     */
    public static final OfBoolean is_miniaturizable$layout() {
        return is_miniaturizable$LAYOUT;
    }

    private static final long is_miniaturizable$OFFSET = 42;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_miniaturizable
     * }
     */
    public static final long is_miniaturizable$offset() {
        return is_miniaturizable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_miniaturizable
     * }
     */
    public static boolean is_miniaturizable(MemorySegment struct) {
        return struct.get(is_miniaturizable$LAYOUT, is_miniaturizable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_miniaturizable
     * }
     */
    public static void is_miniaturizable(MemorySegment struct, boolean fieldValue) {
        struct.set(is_miniaturizable$LAYOUT, is_miniaturizable$OFFSET, fieldValue);
    }

    private static final OfBoolean is_full_screen_allowed$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_full_screen_allowed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_full_screen_allowed
     * }
     */
    public static final OfBoolean is_full_screen_allowed$layout() {
        return is_full_screen_allowed$LAYOUT;
    }

    private static final long is_full_screen_allowed$OFFSET = 43;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_full_screen_allowed
     * }
     */
    public static final long is_full_screen_allowed$offset() {
        return is_full_screen_allowed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_full_screen_allowed
     * }
     */
    public static boolean is_full_screen_allowed(MemorySegment struct) {
        return struct.get(is_full_screen_allowed$LAYOUT, is_full_screen_allowed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_full_screen_allowed
     * }
     */
    public static void is_full_screen_allowed(MemorySegment struct, boolean fieldValue) {
        struct.set(is_full_screen_allowed$LAYOUT, is_full_screen_allowed$OFFSET, fieldValue);
    }

    private static final OfBoolean use_custom_titlebar$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("use_custom_titlebar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool use_custom_titlebar
     * }
     */
    public static final OfBoolean use_custom_titlebar$layout() {
        return use_custom_titlebar$LAYOUT;
    }

    private static final long use_custom_titlebar$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool use_custom_titlebar
     * }
     */
    public static final long use_custom_titlebar$offset() {
        return use_custom_titlebar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool use_custom_titlebar
     * }
     */
    public static boolean use_custom_titlebar(MemorySegment struct) {
        return struct.get(use_custom_titlebar$LAYOUT, use_custom_titlebar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool use_custom_titlebar
     * }
     */
    public static void use_custom_titlebar(MemorySegment struct, boolean fieldValue) {
        struct.set(use_custom_titlebar$LAYOUT, use_custom_titlebar$OFFSET, fieldValue);
    }

    private static final OfDouble titlebar_height$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("titlebar_height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LogicalPixels titlebar_height
     * }
     */
    public static final OfDouble titlebar_height$layout() {
        return titlebar_height$LAYOUT;
    }

    private static final long titlebar_height$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LogicalPixels titlebar_height
     * }
     */
    public static final long titlebar_height$offset() {
        return titlebar_height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LogicalPixels titlebar_height
     * }
     */
    public static double titlebar_height(MemorySegment struct) {
        return struct.get(titlebar_height$LAYOUT, titlebar_height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LogicalPixels titlebar_height
     * }
     */
    public static void titlebar_height(MemorySegment struct, double fieldValue) {
        struct.set(titlebar_height$LAYOUT, titlebar_height$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

