// Generated by jextract

package org.jetbrains.desktop.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ScrollWheelEvent {
 *     WindowId window_id;
 *     LogicalPixels scrolling_delta_x;
 *     LogicalPixels scrolling_delta_y;
 *     bool has_precise_scrolling_deltas;
 *     struct LogicalPoint location_in_window;
 *     Timestamp timestamp;
 * }
 * }
 */
public class ScrollWheelEvent {

    ScrollWheelEvent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        desktop_macos_h.C_LONG_LONG.withName("window_id"),
        desktop_macos_h.C_DOUBLE.withName("scrolling_delta_x"),
        desktop_macos_h.C_DOUBLE.withName("scrolling_delta_y"),
        desktop_macos_h.C_BOOL.withName("has_precise_scrolling_deltas"),
        MemoryLayout.paddingLayout(7),
        LogicalPoint.layout().withName("location_in_window"),
        desktop_macos_h.C_DOUBLE.withName("timestamp")
    ).withName("ScrollWheelEvent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong window_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("window_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WindowId window_id
     * }
     */
    public static final OfLong window_id$layout() {
        return window_id$LAYOUT;
    }

    private static final long window_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WindowId window_id
     * }
     */
    public static final long window_id$offset() {
        return window_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WindowId window_id
     * }
     */
    public static long window_id(MemorySegment struct) {
        return struct.get(window_id$LAYOUT, window_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WindowId window_id
     * }
     */
    public static void window_id(MemorySegment struct, long fieldValue) {
        struct.set(window_id$LAYOUT, window_id$OFFSET, fieldValue);
    }

    private static final OfDouble scrolling_delta_x$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("scrolling_delta_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LogicalPixels scrolling_delta_x
     * }
     */
    public static final OfDouble scrolling_delta_x$layout() {
        return scrolling_delta_x$LAYOUT;
    }

    private static final long scrolling_delta_x$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LogicalPixels scrolling_delta_x
     * }
     */
    public static final long scrolling_delta_x$offset() {
        return scrolling_delta_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LogicalPixels scrolling_delta_x
     * }
     */
    public static double scrolling_delta_x(MemorySegment struct) {
        return struct.get(scrolling_delta_x$LAYOUT, scrolling_delta_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LogicalPixels scrolling_delta_x
     * }
     */
    public static void scrolling_delta_x(MemorySegment struct, double fieldValue) {
        struct.set(scrolling_delta_x$LAYOUT, scrolling_delta_x$OFFSET, fieldValue);
    }

    private static final OfDouble scrolling_delta_y$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("scrolling_delta_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LogicalPixels scrolling_delta_y
     * }
     */
    public static final OfDouble scrolling_delta_y$layout() {
        return scrolling_delta_y$LAYOUT;
    }

    private static final long scrolling_delta_y$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LogicalPixels scrolling_delta_y
     * }
     */
    public static final long scrolling_delta_y$offset() {
        return scrolling_delta_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LogicalPixels scrolling_delta_y
     * }
     */
    public static double scrolling_delta_y(MemorySegment struct) {
        return struct.get(scrolling_delta_y$LAYOUT, scrolling_delta_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LogicalPixels scrolling_delta_y
     * }
     */
    public static void scrolling_delta_y(MemorySegment struct, double fieldValue) {
        struct.set(scrolling_delta_y$LAYOUT, scrolling_delta_y$OFFSET, fieldValue);
    }

    private static final OfBoolean has_precise_scrolling_deltas$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("has_precise_scrolling_deltas"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool has_precise_scrolling_deltas
     * }
     */
    public static final OfBoolean has_precise_scrolling_deltas$layout() {
        return has_precise_scrolling_deltas$LAYOUT;
    }

    private static final long has_precise_scrolling_deltas$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool has_precise_scrolling_deltas
     * }
     */
    public static final long has_precise_scrolling_deltas$offset() {
        return has_precise_scrolling_deltas$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool has_precise_scrolling_deltas
     * }
     */
    public static boolean has_precise_scrolling_deltas(MemorySegment struct) {
        return struct.get(has_precise_scrolling_deltas$LAYOUT, has_precise_scrolling_deltas$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool has_precise_scrolling_deltas
     * }
     */
    public static void has_precise_scrolling_deltas(MemorySegment struct, boolean fieldValue) {
        struct.set(has_precise_scrolling_deltas$LAYOUT, has_precise_scrolling_deltas$OFFSET, fieldValue);
    }

    private static final GroupLayout location_in_window$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("location_in_window"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct LogicalPoint location_in_window
     * }
     */
    public static final GroupLayout location_in_window$layout() {
        return location_in_window$LAYOUT;
    }

    private static final long location_in_window$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct LogicalPoint location_in_window
     * }
     */
    public static final long location_in_window$offset() {
        return location_in_window$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct LogicalPoint location_in_window
     * }
     */
    public static MemorySegment location_in_window(MemorySegment struct) {
        return struct.asSlice(location_in_window$OFFSET, location_in_window$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct LogicalPoint location_in_window
     * }
     */
    public static void location_in_window(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, location_in_window$OFFSET, location_in_window$LAYOUT.byteSize());
    }

    private static final OfDouble timestamp$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Timestamp timestamp
     * }
     */
    public static final OfDouble timestamp$layout() {
        return timestamp$LAYOUT;
    }

    private static final long timestamp$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Timestamp timestamp
     * }
     */
    public static final long timestamp$offset() {
        return timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Timestamp timestamp
     * }
     */
    public static double timestamp(MemorySegment struct) {
        return struct.get(timestamp$LAYOUT, timestamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Timestamp timestamp
     * }
     */
    public static void timestamp(MemorySegment struct, double fieldValue) {
        struct.set(timestamp$LAYOUT, timestamp$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

