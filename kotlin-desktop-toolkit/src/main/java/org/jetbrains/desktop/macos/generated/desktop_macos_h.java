// Generated by jextract

package org.jetbrains.desktop.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class desktop_macos_h {

    desktop_macos_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int EnterCharacter = (int)3L;
    /**
     * {@snippet lang=c :
     * #define EnterCharacter 3
     * }
     */
    public static int EnterCharacter() {
        return EnterCharacter;
    }
    private static final int BackspaceCharacter = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BackspaceCharacter 8
     * }
     */
    public static int BackspaceCharacter() {
        return BackspaceCharacter;
    }
    private static final int TabCharacter = (int)9L;
    /**
     * {@snippet lang=c :
     * #define TabCharacter 9
     * }
     */
    public static int TabCharacter() {
        return TabCharacter;
    }
    private static final int NewlineCharacter = (int)10L;
    /**
     * {@snippet lang=c :
     * #define NewlineCharacter 10
     * }
     */
    public static int NewlineCharacter() {
        return NewlineCharacter;
    }
    private static final int FormFeedCharacter = (int)12L;
    /**
     * {@snippet lang=c :
     * #define FormFeedCharacter 12
     * }
     */
    public static int FormFeedCharacter() {
        return FormFeedCharacter;
    }
    private static final int CarriageReturnCharacter = (int)13L;
    /**
     * {@snippet lang=c :
     * #define CarriageReturnCharacter 13
     * }
     */
    public static int CarriageReturnCharacter() {
        return CarriageReturnCharacter;
    }
    private static final int BackTabCharacter = (int)25L;
    /**
     * {@snippet lang=c :
     * #define BackTabCharacter 25
     * }
     */
    public static int BackTabCharacter() {
        return BackTabCharacter;
    }
    private static final int DeleteCharacter = (int)127L;
    /**
     * {@snippet lang=c :
     * #define DeleteCharacter 127
     * }
     */
    public static int DeleteCharacter() {
        return DeleteCharacter;
    }
    private static final int LineSeparatorCharacter = (int)8232L;
    /**
     * {@snippet lang=c :
     * #define LineSeparatorCharacter 8232
     * }
     */
    public static int LineSeparatorCharacter() {
        return LineSeparatorCharacter;
    }
    private static final int ParagraphSeparatorCharacter = (int)8233L;
    /**
     * {@snippet lang=c :
     * #define ParagraphSeparatorCharacter 8233
     * }
     */
    public static int ParagraphSeparatorCharacter() {
        return ParagraphSeparatorCharacter;
    }
    private static final int UpArrowFunctionKey = (int)63232L;
    /**
     * {@snippet lang=c :
     * #define UpArrowFunctionKey 63232
     * }
     */
    public static int UpArrowFunctionKey() {
        return UpArrowFunctionKey;
    }
    private static final int DownArrowFunctionKey = (int)63233L;
    /**
     * {@snippet lang=c :
     * #define DownArrowFunctionKey 63233
     * }
     */
    public static int DownArrowFunctionKey() {
        return DownArrowFunctionKey;
    }
    private static final int LeftArrowFunctionKey = (int)63234L;
    /**
     * {@snippet lang=c :
     * #define LeftArrowFunctionKey 63234
     * }
     */
    public static int LeftArrowFunctionKey() {
        return LeftArrowFunctionKey;
    }
    private static final int RightArrowFunctionKey = (int)63235L;
    /**
     * {@snippet lang=c :
     * #define RightArrowFunctionKey 63235
     * }
     */
    public static int RightArrowFunctionKey() {
        return RightArrowFunctionKey;
    }
    private static final int F1FunctionKey = (int)63236L;
    /**
     * {@snippet lang=c :
     * #define F1FunctionKey 63236
     * }
     */
    public static int F1FunctionKey() {
        return F1FunctionKey;
    }
    private static final int F2FunctionKey = (int)63237L;
    /**
     * {@snippet lang=c :
     * #define F2FunctionKey 63237
     * }
     */
    public static int F2FunctionKey() {
        return F2FunctionKey;
    }
    private static final int F3FunctionKey = (int)63238L;
    /**
     * {@snippet lang=c :
     * #define F3FunctionKey 63238
     * }
     */
    public static int F3FunctionKey() {
        return F3FunctionKey;
    }
    private static final int F4FunctionKey = (int)63239L;
    /**
     * {@snippet lang=c :
     * #define F4FunctionKey 63239
     * }
     */
    public static int F4FunctionKey() {
        return F4FunctionKey;
    }
    private static final int F5FunctionKey = (int)63240L;
    /**
     * {@snippet lang=c :
     * #define F5FunctionKey 63240
     * }
     */
    public static int F5FunctionKey() {
        return F5FunctionKey;
    }
    private static final int F6FunctionKey = (int)63241L;
    /**
     * {@snippet lang=c :
     * #define F6FunctionKey 63241
     * }
     */
    public static int F6FunctionKey() {
        return F6FunctionKey;
    }
    private static final int F7FunctionKey = (int)63242L;
    /**
     * {@snippet lang=c :
     * #define F7FunctionKey 63242
     * }
     */
    public static int F7FunctionKey() {
        return F7FunctionKey;
    }
    private static final int F8FunctionKey = (int)63243L;
    /**
     * {@snippet lang=c :
     * #define F8FunctionKey 63243
     * }
     */
    public static int F8FunctionKey() {
        return F8FunctionKey;
    }
    private static final int F9FunctionKey = (int)63244L;
    /**
     * {@snippet lang=c :
     * #define F9FunctionKey 63244
     * }
     */
    public static int F9FunctionKey() {
        return F9FunctionKey;
    }
    private static final int F10FunctionKey = (int)63245L;
    /**
     * {@snippet lang=c :
     * #define F10FunctionKey 63245
     * }
     */
    public static int F10FunctionKey() {
        return F10FunctionKey;
    }
    private static final int F11FunctionKey = (int)63246L;
    /**
     * {@snippet lang=c :
     * #define F11FunctionKey 63246
     * }
     */
    public static int F11FunctionKey() {
        return F11FunctionKey;
    }
    private static final int F12FunctionKey = (int)63247L;
    /**
     * {@snippet lang=c :
     * #define F12FunctionKey 63247
     * }
     */
    public static int F12FunctionKey() {
        return F12FunctionKey;
    }
    private static final int F13FunctionKey = (int)63248L;
    /**
     * {@snippet lang=c :
     * #define F13FunctionKey 63248
     * }
     */
    public static int F13FunctionKey() {
        return F13FunctionKey;
    }
    private static final int F14FunctionKey = (int)63249L;
    /**
     * {@snippet lang=c :
     * #define F14FunctionKey 63249
     * }
     */
    public static int F14FunctionKey() {
        return F14FunctionKey;
    }
    private static final int F15FunctionKey = (int)63250L;
    /**
     * {@snippet lang=c :
     * #define F15FunctionKey 63250
     * }
     */
    public static int F15FunctionKey() {
        return F15FunctionKey;
    }
    private static final int F16FunctionKey = (int)63251L;
    /**
     * {@snippet lang=c :
     * #define F16FunctionKey 63251
     * }
     */
    public static int F16FunctionKey() {
        return F16FunctionKey;
    }
    private static final int F17FunctionKey = (int)63252L;
    /**
     * {@snippet lang=c :
     * #define F17FunctionKey 63252
     * }
     */
    public static int F17FunctionKey() {
        return F17FunctionKey;
    }
    private static final int F18FunctionKey = (int)63253L;
    /**
     * {@snippet lang=c :
     * #define F18FunctionKey 63253
     * }
     */
    public static int F18FunctionKey() {
        return F18FunctionKey;
    }
    private static final int F19FunctionKey = (int)63254L;
    /**
     * {@snippet lang=c :
     * #define F19FunctionKey 63254
     * }
     */
    public static int F19FunctionKey() {
        return F19FunctionKey;
    }
    private static final int F20FunctionKey = (int)63255L;
    /**
     * {@snippet lang=c :
     * #define F20FunctionKey 63255
     * }
     */
    public static int F20FunctionKey() {
        return F20FunctionKey;
    }
    private static final int F21FunctionKey = (int)63256L;
    /**
     * {@snippet lang=c :
     * #define F21FunctionKey 63256
     * }
     */
    public static int F21FunctionKey() {
        return F21FunctionKey;
    }
    private static final int F22FunctionKey = (int)63257L;
    /**
     * {@snippet lang=c :
     * #define F22FunctionKey 63257
     * }
     */
    public static int F22FunctionKey() {
        return F22FunctionKey;
    }
    private static final int F23FunctionKey = (int)63258L;
    /**
     * {@snippet lang=c :
     * #define F23FunctionKey 63258
     * }
     */
    public static int F23FunctionKey() {
        return F23FunctionKey;
    }
    private static final int F24FunctionKey = (int)63259L;
    /**
     * {@snippet lang=c :
     * #define F24FunctionKey 63259
     * }
     */
    public static int F24FunctionKey() {
        return F24FunctionKey;
    }
    private static final int F25FunctionKey = (int)63260L;
    /**
     * {@snippet lang=c :
     * #define F25FunctionKey 63260
     * }
     */
    public static int F25FunctionKey() {
        return F25FunctionKey;
    }
    private static final int F26FunctionKey = (int)63261L;
    /**
     * {@snippet lang=c :
     * #define F26FunctionKey 63261
     * }
     */
    public static int F26FunctionKey() {
        return F26FunctionKey;
    }
    private static final int F27FunctionKey = (int)63262L;
    /**
     * {@snippet lang=c :
     * #define F27FunctionKey 63262
     * }
     */
    public static int F27FunctionKey() {
        return F27FunctionKey;
    }
    private static final int F28FunctionKey = (int)63263L;
    /**
     * {@snippet lang=c :
     * #define F28FunctionKey 63263
     * }
     */
    public static int F28FunctionKey() {
        return F28FunctionKey;
    }
    private static final int F29FunctionKey = (int)63264L;
    /**
     * {@snippet lang=c :
     * #define F29FunctionKey 63264
     * }
     */
    public static int F29FunctionKey() {
        return F29FunctionKey;
    }
    private static final int F30FunctionKey = (int)63265L;
    /**
     * {@snippet lang=c :
     * #define F30FunctionKey 63265
     * }
     */
    public static int F30FunctionKey() {
        return F30FunctionKey;
    }
    private static final int F31FunctionKey = (int)63266L;
    /**
     * {@snippet lang=c :
     * #define F31FunctionKey 63266
     * }
     */
    public static int F31FunctionKey() {
        return F31FunctionKey;
    }
    private static final int F32FunctionKey = (int)63267L;
    /**
     * {@snippet lang=c :
     * #define F32FunctionKey 63267
     * }
     */
    public static int F32FunctionKey() {
        return F32FunctionKey;
    }
    private static final int F33FunctionKey = (int)63268L;
    /**
     * {@snippet lang=c :
     * #define F33FunctionKey 63268
     * }
     */
    public static int F33FunctionKey() {
        return F33FunctionKey;
    }
    private static final int F34FunctionKey = (int)63269L;
    /**
     * {@snippet lang=c :
     * #define F34FunctionKey 63269
     * }
     */
    public static int F34FunctionKey() {
        return F34FunctionKey;
    }
    private static final int F35FunctionKey = (int)63270L;
    /**
     * {@snippet lang=c :
     * #define F35FunctionKey 63270
     * }
     */
    public static int F35FunctionKey() {
        return F35FunctionKey;
    }
    private static final int InsertFunctionKey = (int)63271L;
    /**
     * {@snippet lang=c :
     * #define InsertFunctionKey 63271
     * }
     */
    public static int InsertFunctionKey() {
        return InsertFunctionKey;
    }
    private static final int DeleteFunctionKey = (int)63272L;
    /**
     * {@snippet lang=c :
     * #define DeleteFunctionKey 63272
     * }
     */
    public static int DeleteFunctionKey() {
        return DeleteFunctionKey;
    }
    private static final int HomeFunctionKey = (int)63273L;
    /**
     * {@snippet lang=c :
     * #define HomeFunctionKey 63273
     * }
     */
    public static int HomeFunctionKey() {
        return HomeFunctionKey;
    }
    private static final int BeginFunctionKey = (int)63274L;
    /**
     * {@snippet lang=c :
     * #define BeginFunctionKey 63274
     * }
     */
    public static int BeginFunctionKey() {
        return BeginFunctionKey;
    }
    private static final int EndFunctionKey = (int)63275L;
    /**
     * {@snippet lang=c :
     * #define EndFunctionKey 63275
     * }
     */
    public static int EndFunctionKey() {
        return EndFunctionKey;
    }
    private static final int PageUpFunctionKey = (int)63276L;
    /**
     * {@snippet lang=c :
     * #define PageUpFunctionKey 63276
     * }
     */
    public static int PageUpFunctionKey() {
        return PageUpFunctionKey;
    }
    private static final int PageDownFunctionKey = (int)63277L;
    /**
     * {@snippet lang=c :
     * #define PageDownFunctionKey 63277
     * }
     */
    public static int PageDownFunctionKey() {
        return PageDownFunctionKey;
    }
    private static final int PrintScreenFunctionKey = (int)63278L;
    /**
     * {@snippet lang=c :
     * #define PrintScreenFunctionKey 63278
     * }
     */
    public static int PrintScreenFunctionKey() {
        return PrintScreenFunctionKey;
    }
    private static final int ScrollLockFunctionKey = (int)63279L;
    /**
     * {@snippet lang=c :
     * #define ScrollLockFunctionKey 63279
     * }
     */
    public static int ScrollLockFunctionKey() {
        return ScrollLockFunctionKey;
    }
    private static final int PauseFunctionKey = (int)63280L;
    /**
     * {@snippet lang=c :
     * #define PauseFunctionKey 63280
     * }
     */
    public static int PauseFunctionKey() {
        return PauseFunctionKey;
    }
    private static final int SysReqFunctionKey = (int)63281L;
    /**
     * {@snippet lang=c :
     * #define SysReqFunctionKey 63281
     * }
     */
    public static int SysReqFunctionKey() {
        return SysReqFunctionKey;
    }
    private static final int BreakFunctionKey = (int)63282L;
    /**
     * {@snippet lang=c :
     * #define BreakFunctionKey 63282
     * }
     */
    public static int BreakFunctionKey() {
        return BreakFunctionKey;
    }
    private static final int ResetFunctionKey = (int)63283L;
    /**
     * {@snippet lang=c :
     * #define ResetFunctionKey 63283
     * }
     */
    public static int ResetFunctionKey() {
        return ResetFunctionKey;
    }
    private static final int StopFunctionKey = (int)63284L;
    /**
     * {@snippet lang=c :
     * #define StopFunctionKey 63284
     * }
     */
    public static int StopFunctionKey() {
        return StopFunctionKey;
    }
    private static final int MenuFunctionKey = (int)63285L;
    /**
     * {@snippet lang=c :
     * #define MenuFunctionKey 63285
     * }
     */
    public static int MenuFunctionKey() {
        return MenuFunctionKey;
    }
    private static final int UserFunctionKey = (int)63286L;
    /**
     * {@snippet lang=c :
     * #define UserFunctionKey 63286
     * }
     */
    public static int UserFunctionKey() {
        return UserFunctionKey;
    }
    private static final int SystemFunctionKey = (int)63287L;
    /**
     * {@snippet lang=c :
     * #define SystemFunctionKey 63287
     * }
     */
    public static int SystemFunctionKey() {
        return SystemFunctionKey;
    }
    private static final int PrintFunctionKey = (int)63288L;
    /**
     * {@snippet lang=c :
     * #define PrintFunctionKey 63288
     * }
     */
    public static int PrintFunctionKey() {
        return PrintFunctionKey;
    }
    private static final int ClearLineFunctionKey = (int)63289L;
    /**
     * {@snippet lang=c :
     * #define ClearLineFunctionKey 63289
     * }
     */
    public static int ClearLineFunctionKey() {
        return ClearLineFunctionKey;
    }
    private static final int ClearDisplayFunctionKey = (int)63290L;
    /**
     * {@snippet lang=c :
     * #define ClearDisplayFunctionKey 63290
     * }
     */
    public static int ClearDisplayFunctionKey() {
        return ClearDisplayFunctionKey;
    }
    private static final int InsertLineFunctionKey = (int)63291L;
    /**
     * {@snippet lang=c :
     * #define InsertLineFunctionKey 63291
     * }
     */
    public static int InsertLineFunctionKey() {
        return InsertLineFunctionKey;
    }
    private static final int DeleteLineFunctionKey = (int)63292L;
    /**
     * {@snippet lang=c :
     * #define DeleteLineFunctionKey 63292
     * }
     */
    public static int DeleteLineFunctionKey() {
        return DeleteLineFunctionKey;
    }
    private static final int InsertCharFunctionKey = (int)63293L;
    /**
     * {@snippet lang=c :
     * #define InsertCharFunctionKey 63293
     * }
     */
    public static int InsertCharFunctionKey() {
        return InsertCharFunctionKey;
    }
    private static final int DeleteCharFunctionKey = (int)63294L;
    /**
     * {@snippet lang=c :
     * #define DeleteCharFunctionKey 63294
     * }
     */
    public static int DeleteCharFunctionKey() {
        return DeleteCharFunctionKey;
    }
    private static final int PrevFunctionKey = (int)63295L;
    /**
     * {@snippet lang=c :
     * #define PrevFunctionKey 63295
     * }
     */
    public static int PrevFunctionKey() {
        return PrevFunctionKey;
    }
    private static final int NextFunctionKey = (int)63296L;
    /**
     * {@snippet lang=c :
     * #define NextFunctionKey 63296
     * }
     */
    public static int NextFunctionKey() {
        return NextFunctionKey;
    }
    private static final int SelectFunctionKey = (int)63297L;
    /**
     * {@snippet lang=c :
     * #define SelectFunctionKey 63297
     * }
     */
    public static int SelectFunctionKey() {
        return SelectFunctionKey;
    }
    private static final int ExecuteFunctionKey = (int)63298L;
    /**
     * {@snippet lang=c :
     * #define ExecuteFunctionKey 63298
     * }
     */
    public static int ExecuteFunctionKey() {
        return ExecuteFunctionKey;
    }
    private static final int UndoFunctionKey = (int)63299L;
    /**
     * {@snippet lang=c :
     * #define UndoFunctionKey 63299
     * }
     */
    public static int UndoFunctionKey() {
        return UndoFunctionKey;
    }
    private static final int RedoFunctionKey = (int)63300L;
    /**
     * {@snippet lang=c :
     * #define RedoFunctionKey 63300
     * }
     */
    public static int RedoFunctionKey() {
        return RedoFunctionKey;
    }
    private static final int FindFunctionKey = (int)63301L;
    /**
     * {@snippet lang=c :
     * #define FindFunctionKey 63301
     * }
     */
    public static int FindFunctionKey() {
        return FindFunctionKey;
    }
    private static final int HelpFunctionKey = (int)63302L;
    /**
     * {@snippet lang=c :
     * #define HelpFunctionKey 63302
     * }
     */
    public static int HelpFunctionKey() {
        return HelpFunctionKey;
    }
    private static final int ModeSwitchFunctionKey = (int)63303L;
    /**
     * {@snippet lang=c :
     * #define ModeSwitchFunctionKey 63303
     * }
     */
    public static int ModeSwitchFunctionKey() {
        return ModeSwitchFunctionKey;
    }
    private static final int LeftMouseButton = (int)0L;
    /**
     * {@snippet lang=c :
     * #define LeftMouseButton 0
     * }
     */
    public static int LeftMouseButton() {
        return LeftMouseButton;
    }
    private static final int RightMouseButton = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RightMouseButton 1
     * }
     */
    public static int RightMouseButton() {
        return RightMouseButton;
    }
    private static final int MiddleMouseButton = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MiddleMouseButton 2
     * }
     */
    public static int MiddleMouseButton() {
        return MiddleMouseButton;
    }
    private static final int VK_ANSI_A = (int)0L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_A = 0
     * }
     */
    public static int VK_ANSI_A() {
        return VK_ANSI_A;
    }
    private static final int VK_ANSI_S = (int)1L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_S = 1
     * }
     */
    public static int VK_ANSI_S() {
        return VK_ANSI_S;
    }
    private static final int VK_ANSI_D = (int)2L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_D = 2
     * }
     */
    public static int VK_ANSI_D() {
        return VK_ANSI_D;
    }
    private static final int VK_ANSI_F = (int)3L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_F = 3
     * }
     */
    public static int VK_ANSI_F() {
        return VK_ANSI_F;
    }
    private static final int VK_ANSI_H = (int)4L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_H = 4
     * }
     */
    public static int VK_ANSI_H() {
        return VK_ANSI_H;
    }
    private static final int VK_ANSI_G = (int)5L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_G = 5
     * }
     */
    public static int VK_ANSI_G() {
        return VK_ANSI_G;
    }
    private static final int VK_ANSI_Z = (int)6L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Z = 6
     * }
     */
    public static int VK_ANSI_Z() {
        return VK_ANSI_Z;
    }
    private static final int VK_ANSI_X = (int)7L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_X = 7
     * }
     */
    public static int VK_ANSI_X() {
        return VK_ANSI_X;
    }
    private static final int VK_ANSI_C = (int)8L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_C = 8
     * }
     */
    public static int VK_ANSI_C() {
        return VK_ANSI_C;
    }
    private static final int VK_ANSI_V = (int)9L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_V = 9
     * }
     */
    public static int VK_ANSI_V() {
        return VK_ANSI_V;
    }
    private static final int VK_ANSI_B = (int)11L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_B = 11
     * }
     */
    public static int VK_ANSI_B() {
        return VK_ANSI_B;
    }
    private static final int VK_ANSI_Q = (int)12L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Q = 12
     * }
     */
    public static int VK_ANSI_Q() {
        return VK_ANSI_Q;
    }
    private static final int VK_ANSI_W = (int)13L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_W = 13
     * }
     */
    public static int VK_ANSI_W() {
        return VK_ANSI_W;
    }
    private static final int VK_ANSI_E = (int)14L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_E = 14
     * }
     */
    public static int VK_ANSI_E() {
        return VK_ANSI_E;
    }
    private static final int VK_ANSI_R = (int)15L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_R = 15
     * }
     */
    public static int VK_ANSI_R() {
        return VK_ANSI_R;
    }
    private static final int VK_ANSI_Y = (int)16L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Y = 16
     * }
     */
    public static int VK_ANSI_Y() {
        return VK_ANSI_Y;
    }
    private static final int VK_ANSI_T = (int)17L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_T = 17
     * }
     */
    public static int VK_ANSI_T() {
        return VK_ANSI_T;
    }
    private static final int VK_ANSI_1 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_1 = 18
     * }
     */
    public static int VK_ANSI_1() {
        return VK_ANSI_1;
    }
    private static final int VK_ANSI_2 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_2 = 19
     * }
     */
    public static int VK_ANSI_2() {
        return VK_ANSI_2;
    }
    private static final int VK_ANSI_3 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_3 = 20
     * }
     */
    public static int VK_ANSI_3() {
        return VK_ANSI_3;
    }
    private static final int VK_ANSI_4 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_4 = 21
     * }
     */
    public static int VK_ANSI_4() {
        return VK_ANSI_4;
    }
    private static final int VK_ANSI_6 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_6 = 22
     * }
     */
    public static int VK_ANSI_6() {
        return VK_ANSI_6;
    }
    private static final int VK_ANSI_5 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_5 = 23
     * }
     */
    public static int VK_ANSI_5() {
        return VK_ANSI_5;
    }
    private static final int VK_ANSI_Equal = (int)24L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Equal = 24
     * }
     */
    public static int VK_ANSI_Equal() {
        return VK_ANSI_Equal;
    }
    private static final int VK_ANSI_9 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_9 = 25
     * }
     */
    public static int VK_ANSI_9() {
        return VK_ANSI_9;
    }
    private static final int VK_ANSI_7 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_7 = 26
     * }
     */
    public static int VK_ANSI_7() {
        return VK_ANSI_7;
    }
    private static final int VK_ANSI_Minus = (int)27L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Minus = 27
     * }
     */
    public static int VK_ANSI_Minus() {
        return VK_ANSI_Minus;
    }
    private static final int VK_ANSI_8 = (int)28L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_8 = 28
     * }
     */
    public static int VK_ANSI_8() {
        return VK_ANSI_8;
    }
    private static final int VK_ANSI_0 = (int)29L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_0 = 29
     * }
     */
    public static int VK_ANSI_0() {
        return VK_ANSI_0;
    }
    private static final int VK_ANSI_RightBracket = (int)30L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_RightBracket = 30
     * }
     */
    public static int VK_ANSI_RightBracket() {
        return VK_ANSI_RightBracket;
    }
    private static final int VK_ANSI_O = (int)31L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_O = 31
     * }
     */
    public static int VK_ANSI_O() {
        return VK_ANSI_O;
    }
    private static final int VK_ANSI_U = (int)32L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_U = 32
     * }
     */
    public static int VK_ANSI_U() {
        return VK_ANSI_U;
    }
    private static final int VK_ANSI_LeftBracket = (int)33L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_LeftBracket = 33
     * }
     */
    public static int VK_ANSI_LeftBracket() {
        return VK_ANSI_LeftBracket;
    }
    private static final int VK_ANSI_I = (int)34L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_I = 34
     * }
     */
    public static int VK_ANSI_I() {
        return VK_ANSI_I;
    }
    private static final int VK_ANSI_P = (int)35L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_P = 35
     * }
     */
    public static int VK_ANSI_P() {
        return VK_ANSI_P;
    }
    private static final int VK_ANSI_L = (int)37L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_L = 37
     * }
     */
    public static int VK_ANSI_L() {
        return VK_ANSI_L;
    }
    private static final int VK_ANSI_J = (int)38L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_J = 38
     * }
     */
    public static int VK_ANSI_J() {
        return VK_ANSI_J;
    }
    private static final int VK_ANSI_Quote = (int)39L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Quote = 39
     * }
     */
    public static int VK_ANSI_Quote() {
        return VK_ANSI_Quote;
    }
    private static final int VK_ANSI_K = (int)40L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_K = 40
     * }
     */
    public static int VK_ANSI_K() {
        return VK_ANSI_K;
    }
    private static final int VK_ANSI_Semicolon = (int)41L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Semicolon = 41
     * }
     */
    public static int VK_ANSI_Semicolon() {
        return VK_ANSI_Semicolon;
    }
    private static final int VK_ANSI_Backslash = (int)42L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Backslash = 42
     * }
     */
    public static int VK_ANSI_Backslash() {
        return VK_ANSI_Backslash;
    }
    private static final int VK_ANSI_Comma = (int)43L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Comma = 43
     * }
     */
    public static int VK_ANSI_Comma() {
        return VK_ANSI_Comma;
    }
    private static final int VK_ANSI_Slash = (int)44L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Slash = 44
     * }
     */
    public static int VK_ANSI_Slash() {
        return VK_ANSI_Slash;
    }
    private static final int VK_ANSI_N = (int)45L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_N = 45
     * }
     */
    public static int VK_ANSI_N() {
        return VK_ANSI_N;
    }
    private static final int VK_ANSI_M = (int)46L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_M = 46
     * }
     */
    public static int VK_ANSI_M() {
        return VK_ANSI_M;
    }
    private static final int VK_ANSI_Period = (int)47L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Period = 47
     * }
     */
    public static int VK_ANSI_Period() {
        return VK_ANSI_Period;
    }
    private static final int VK_ANSI_Grave = (int)50L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Grave = 50
     * }
     */
    public static int VK_ANSI_Grave() {
        return VK_ANSI_Grave;
    }
    private static final int VK_ANSI_KeypadDecimal = (int)65L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_KeypadDecimal = 65
     * }
     */
    public static int VK_ANSI_KeypadDecimal() {
        return VK_ANSI_KeypadDecimal;
    }
    private static final int VK_ANSI_KeypadMultiply = (int)67L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_KeypadMultiply = 67
     * }
     */
    public static int VK_ANSI_KeypadMultiply() {
        return VK_ANSI_KeypadMultiply;
    }
    private static final int VK_ANSI_KeypadPlus = (int)69L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_KeypadPlus = 69
     * }
     */
    public static int VK_ANSI_KeypadPlus() {
        return VK_ANSI_KeypadPlus;
    }
    private static final int VK_ANSI_KeypadClear = (int)71L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_KeypadClear = 71
     * }
     */
    public static int VK_ANSI_KeypadClear() {
        return VK_ANSI_KeypadClear;
    }
    private static final int VK_ANSI_KeypadDivide = (int)75L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_KeypadDivide = 75
     * }
     */
    public static int VK_ANSI_KeypadDivide() {
        return VK_ANSI_KeypadDivide;
    }
    private static final int VK_ANSI_KeypadEnter = (int)76L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_KeypadEnter = 76
     * }
     */
    public static int VK_ANSI_KeypadEnter() {
        return VK_ANSI_KeypadEnter;
    }
    private static final int VK_ANSI_KeypadMinus = (int)78L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_KeypadMinus = 78
     * }
     */
    public static int VK_ANSI_KeypadMinus() {
        return VK_ANSI_KeypadMinus;
    }
    private static final int VK_ANSI_KeypadEquals = (int)81L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_KeypadEquals = 81
     * }
     */
    public static int VK_ANSI_KeypadEquals() {
        return VK_ANSI_KeypadEquals;
    }
    private static final int VK_ANSI_Keypad0 = (int)82L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad0 = 82
     * }
     */
    public static int VK_ANSI_Keypad0() {
        return VK_ANSI_Keypad0;
    }
    private static final int VK_ANSI_Keypad1 = (int)83L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad1 = 83
     * }
     */
    public static int VK_ANSI_Keypad1() {
        return VK_ANSI_Keypad1;
    }
    private static final int VK_ANSI_Keypad2 = (int)84L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad2 = 84
     * }
     */
    public static int VK_ANSI_Keypad2() {
        return VK_ANSI_Keypad2;
    }
    private static final int VK_ANSI_Keypad3 = (int)85L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad3 = 85
     * }
     */
    public static int VK_ANSI_Keypad3() {
        return VK_ANSI_Keypad3;
    }
    private static final int VK_ANSI_Keypad4 = (int)86L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad4 = 86
     * }
     */
    public static int VK_ANSI_Keypad4() {
        return VK_ANSI_Keypad4;
    }
    private static final int VK_ANSI_Keypad5 = (int)87L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad5 = 87
     * }
     */
    public static int VK_ANSI_Keypad5() {
        return VK_ANSI_Keypad5;
    }
    private static final int VK_ANSI_Keypad6 = (int)88L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad6 = 88
     * }
     */
    public static int VK_ANSI_Keypad6() {
        return VK_ANSI_Keypad6;
    }
    private static final int VK_ANSI_Keypad7 = (int)89L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad7 = 89
     * }
     */
    public static int VK_ANSI_Keypad7() {
        return VK_ANSI_Keypad7;
    }
    private static final int VK_ANSI_Keypad8 = (int)91L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad8 = 91
     * }
     */
    public static int VK_ANSI_Keypad8() {
        return VK_ANSI_Keypad8;
    }
    private static final int VK_ANSI_Keypad9 = (int)92L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ANSI_Keypad9 = 92
     * }
     */
    public static int VK_ANSI_Keypad9() {
        return VK_ANSI_Keypad9;
    }
    private static final int VK_Return = (int)36L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Return = 36
     * }
     */
    public static int VK_Return() {
        return VK_Return;
    }
    private static final int VK_Tab = (int)48L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Tab = 48
     * }
     */
    public static int VK_Tab() {
        return VK_Tab;
    }
    private static final int VK_Space = (int)49L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Space = 49
     * }
     */
    public static int VK_Space() {
        return VK_Space;
    }
    private static final int VK_Delete = (int)51L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Delete = 51
     * }
     */
    public static int VK_Delete() {
        return VK_Delete;
    }
    private static final int VK_Escape = (int)53L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Escape = 53
     * }
     */
    public static int VK_Escape() {
        return VK_Escape;
    }
    private static final int VK_Command = (int)55L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Command = 55
     * }
     */
    public static int VK_Command() {
        return VK_Command;
    }
    private static final int VK_Shift = (int)56L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Shift = 56
     * }
     */
    public static int VK_Shift() {
        return VK_Shift;
    }
    private static final int VK_CapsLock = (int)57L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_CapsLock = 57
     * }
     */
    public static int VK_CapsLock() {
        return VK_CapsLock;
    }
    private static final int VK_Option = (int)58L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Option = 58
     * }
     */
    public static int VK_Option() {
        return VK_Option;
    }
    private static final int VK_Control = (int)59L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Control = 59
     * }
     */
    public static int VK_Control() {
        return VK_Control;
    }
    private static final int VK_RightCommand = (int)54L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_RightCommand = 54
     * }
     */
    public static int VK_RightCommand() {
        return VK_RightCommand;
    }
    private static final int VK_RightShift = (int)60L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_RightShift = 60
     * }
     */
    public static int VK_RightShift() {
        return VK_RightShift;
    }
    private static final int VK_RightOption = (int)61L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_RightOption = 61
     * }
     */
    public static int VK_RightOption() {
        return VK_RightOption;
    }
    private static final int VK_RightControl = (int)62L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_RightControl = 62
     * }
     */
    public static int VK_RightControl() {
        return VK_RightControl;
    }
    private static final int VK_Function = (int)63L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Function = 63
     * }
     */
    public static int VK_Function() {
        return VK_Function;
    }
    private static final int VK_F17 = (int)64L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F17 = 64
     * }
     */
    public static int VK_F17() {
        return VK_F17;
    }
    private static final int VK_VolumeUp = (int)72L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_VolumeUp = 72
     * }
     */
    public static int VK_VolumeUp() {
        return VK_VolumeUp;
    }
    private static final int VK_VolumeDown = (int)73L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_VolumeDown = 73
     * }
     */
    public static int VK_VolumeDown() {
        return VK_VolumeDown;
    }
    private static final int VK_Mute = (int)74L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Mute = 74
     * }
     */
    public static int VK_Mute() {
        return VK_Mute;
    }
    private static final int VK_F18 = (int)79L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F18 = 79
     * }
     */
    public static int VK_F18() {
        return VK_F18;
    }
    private static final int VK_F19 = (int)80L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F19 = 80
     * }
     */
    public static int VK_F19() {
        return VK_F19;
    }
    private static final int VK_F20 = (int)90L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F20 = 90
     * }
     */
    public static int VK_F20() {
        return VK_F20;
    }
    private static final int VK_F5 = (int)96L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F5 = 96
     * }
     */
    public static int VK_F5() {
        return VK_F5;
    }
    private static final int VK_F6 = (int)97L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F6 = 97
     * }
     */
    public static int VK_F6() {
        return VK_F6;
    }
    private static final int VK_F7 = (int)98L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F7 = 98
     * }
     */
    public static int VK_F7() {
        return VK_F7;
    }
    private static final int VK_F3 = (int)99L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F3 = 99
     * }
     */
    public static int VK_F3() {
        return VK_F3;
    }
    private static final int VK_F8 = (int)100L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F8 = 100
     * }
     */
    public static int VK_F8() {
        return VK_F8;
    }
    private static final int VK_F9 = (int)101L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F9 = 101
     * }
     */
    public static int VK_F9() {
        return VK_F9;
    }
    private static final int VK_F11 = (int)103L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F11 = 103
     * }
     */
    public static int VK_F11() {
        return VK_F11;
    }
    private static final int VK_F13 = (int)105L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F13 = 105
     * }
     */
    public static int VK_F13() {
        return VK_F13;
    }
    private static final int VK_F16 = (int)106L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F16 = 106
     * }
     */
    public static int VK_F16() {
        return VK_F16;
    }
    private static final int VK_F14 = (int)107L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F14 = 107
     * }
     */
    public static int VK_F14() {
        return VK_F14;
    }
    private static final int VK_F10 = (int)109L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F10 = 109
     * }
     */
    public static int VK_F10() {
        return VK_F10;
    }
    private static final int VK_ContextualMenu = (int)110L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ContextualMenu = 110
     * }
     */
    public static int VK_ContextualMenu() {
        return VK_ContextualMenu;
    }
    private static final int VK_F12 = (int)111L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F12 = 111
     * }
     */
    public static int VK_F12() {
        return VK_F12;
    }
    private static final int VK_F15 = (int)113L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F15 = 113
     * }
     */
    public static int VK_F15() {
        return VK_F15;
    }
    private static final int VK_Help = (int)114L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Help = 114
     * }
     */
    public static int VK_Help() {
        return VK_Help;
    }
    private static final int VK_Home = (int)115L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_Home = 115
     * }
     */
    public static int VK_Home() {
        return VK_Home;
    }
    private static final int VK_PageUp = (int)116L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_PageUp = 116
     * }
     */
    public static int VK_PageUp() {
        return VK_PageUp;
    }
    private static final int VK_ForwardDelete = (int)117L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ForwardDelete = 117
     * }
     */
    public static int VK_ForwardDelete() {
        return VK_ForwardDelete;
    }
    private static final int VK_F4 = (int)118L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F4 = 118
     * }
     */
    public static int VK_F4() {
        return VK_F4;
    }
    private static final int VK_End = (int)119L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_End = 119
     * }
     */
    public static int VK_End() {
        return VK_End;
    }
    private static final int VK_F2 = (int)120L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F2 = 120
     * }
     */
    public static int VK_F2() {
        return VK_F2;
    }
    private static final int VK_PageDown = (int)121L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_PageDown = 121
     * }
     */
    public static int VK_PageDown() {
        return VK_PageDown;
    }
    private static final int VK_F1 = (int)122L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_F1 = 122
     * }
     */
    public static int VK_F1() {
        return VK_F1;
    }
    private static final int VK_LeftArrow = (int)123L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_LeftArrow = 123
     * }
     */
    public static int VK_LeftArrow() {
        return VK_LeftArrow;
    }
    private static final int VK_RightArrow = (int)124L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_RightArrow = 124
     * }
     */
    public static int VK_RightArrow() {
        return VK_RightArrow;
    }
    private static final int VK_DownArrow = (int)125L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_DownArrow = 125
     * }
     */
    public static int VK_DownArrow() {
        return VK_DownArrow;
    }
    private static final int VK_UpArrow = (int)126L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_UpArrow = 126
     * }
     */
    public static int VK_UpArrow() {
        return VK_UpArrow;
    }
    private static final int VK_ISO_Section = (int)10L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_ISO_Section = 10
     * }
     */
    public static int VK_ISO_Section() {
        return VK_ISO_Section;
    }
    private static final int VK_JIS_Yen = (int)93L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_JIS_Yen = 93
     * }
     */
    public static int VK_JIS_Yen() {
        return VK_JIS_Yen;
    }
    private static final int VK_JIS_Underscore = (int)94L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_JIS_Underscore = 94
     * }
     */
    public static int VK_JIS_Underscore() {
        return VK_JIS_Underscore;
    }
    private static final int VK_JIS_KeypadComma = (int)95L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_JIS_KeypadComma = 95
     * }
     */
    public static int VK_JIS_KeypadComma() {
        return VK_JIS_KeypadComma;
    }
    private static final int VK_JIS_Eisu = (int)102L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_JIS_Eisu = 102
     * }
     */
    public static int VK_JIS_Eisu() {
        return VK_JIS_Eisu;
    }
    private static final int VK_JIS_Kana = (int)104L;
    /**
     * {@snippet lang=c :
     * enum KeyCode.VK_JIS_Kana = 104
     * }
     */
    public static int VK_JIS_Kana() {
        return VK_JIS_Kana;
    }
    private static final int Off = (int)0L;
    /**
     * {@snippet lang=c :
     * enum LogLevel.Off = 0
     * }
     */
    public static int Off() {
        return Off;
    }
    private static final int Error_ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum LogLevel.Error = 1
     * }
     */
    public static int Error_() {
        return Error_;
    }
    private static final int Warn = (int)2L;
    /**
     * {@snippet lang=c :
     * enum LogLevel.Warn = 2
     * }
     */
    public static int Warn() {
        return Warn;
    }
    private static final int Info = (int)3L;
    /**
     * {@snippet lang=c :
     * enum LogLevel.Info = 3
     * }
     */
    public static int Info() {
        return Info;
    }
    private static final int Debug = (int)4L;
    /**
     * {@snippet lang=c :
     * enum LogLevel.Debug = 4
     * }
     */
    public static int Debug() {
        return Debug;
    }
    private static final int Trace = (int)5L;
    /**
     * {@snippet lang=c :
     * enum LogLevel.Trace = 5
     * }
     */
    public static int Trace() {
        return Trace;
    }
    private static final int TitlebarEffect = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.TitlebarEffect = 0
     * }
     */
    public static int TitlebarEffect() {
        return TitlebarEffect;
    }
    private static final int SelectionEffect = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.SelectionEffect = 1
     * }
     */
    public static int SelectionEffect() {
        return SelectionEffect;
    }
    private static final int MenuEffect = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.MenuEffect = 2
     * }
     */
    public static int MenuEffect() {
        return MenuEffect;
    }
    private static final int PopoverEffect = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.PopoverEffect = 3
     * }
     */
    public static int PopoverEffect() {
        return PopoverEffect;
    }
    private static final int SidebarEffect = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.SidebarEffect = 4
     * }
     */
    public static int SidebarEffect() {
        return SidebarEffect;
    }
    private static final int HeaderViewEffect = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.HeaderViewEffect = 5
     * }
     */
    public static int HeaderViewEffect() {
        return HeaderViewEffect;
    }
    private static final int SheetEffect = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.SheetEffect = 6
     * }
     */
    public static int SheetEffect() {
        return SheetEffect;
    }
    private static final int WindowBackgroundEffect = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.WindowBackgroundEffect = 7
     * }
     */
    public static int WindowBackgroundEffect() {
        return WindowBackgroundEffect;
    }
    private static final int HUDWindowEffect = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.HUDWindowEffect = 8
     * }
     */
    public static int HUDWindowEffect() {
        return HUDWindowEffect;
    }
    private static final int FullScreenUIEffect = (int)9L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.FullScreenUIEffect = 9
     * }
     */
    public static int FullScreenUIEffect() {
        return FullScreenUIEffect;
    }
    private static final int ToolTipEffect = (int)10L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.ToolTipEffect = 10
     * }
     */
    public static int ToolTipEffect() {
        return ToolTipEffect;
    }
    private static final int ContentBackgroundEffect = (int)11L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.ContentBackgroundEffect = 11
     * }
     */
    public static int ContentBackgroundEffect() {
        return ContentBackgroundEffect;
    }
    private static final int UnderWindowBackgroundEffect = (int)12L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.UnderWindowBackgroundEffect = 12
     * }
     */
    public static int UnderWindowBackgroundEffect() {
        return UnderWindowBackgroundEffect;
    }
    private static final int UnderPageBackgroundEffect = (int)13L;
    /**
     * {@snippet lang=c :
     * enum WindowVisualEffect.UnderPageBackgroundEffect = 13
     * }
     */
    public static int UnderPageBackgroundEffect() {
        return UnderPageBackgroundEffect;
    }
    /**
     * {@snippet lang=c :
     * typedef int64_t WindowId
     * }
     */
    public static final OfLong WindowId = desktop_macos_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint32_t KeyModifiersSet
     * }
     */
    public static final OfInt KeyModifiersSet = desktop_macos_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef char *StrPtr
     * }
     */
    public static final AddressLayout StrPtr = desktop_macos_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef double Timestamp
     * }
     */
    public static final OfDouble Timestamp = desktop_macos_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double LogicalPixels
     * }
     */
    public static final OfDouble LogicalPixels = desktop_macos_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef uint32_t MouseButton
     * }
     */
    public static final OfInt MouseButton = desktop_macos_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t ScreenId
     * }
     */
    public static final OfInt ScreenId = desktop_macos_h.C_INT;
    private static final int KeyDown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.KeyDown = 0
     * }
     */
    public static int KeyDown() {
        return KeyDown;
    }
    private static final int KeyUp = (int)1L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.KeyUp = 1
     * }
     */
    public static int KeyUp() {
        return KeyUp;
    }
    private static final int ModifiersChanged = (int)2L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.ModifiersChanged = 2
     * }
     */
    public static int ModifiersChanged() {
        return ModifiersChanged;
    }
    private static final int MouseMoved = (int)3L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.MouseMoved = 3
     * }
     */
    public static int MouseMoved() {
        return MouseMoved;
    }
    private static final int MouseDragged = (int)4L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.MouseDragged = 4
     * }
     */
    public static int MouseDragged() {
        return MouseDragged;
    }
    private static final int MouseEntered = (int)5L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.MouseEntered = 5
     * }
     */
    public static int MouseEntered() {
        return MouseEntered;
    }
    private static final int MouseExited = (int)6L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.MouseExited = 6
     * }
     */
    public static int MouseExited() {
        return MouseExited;
    }
    private static final int MouseDown = (int)7L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.MouseDown = 7
     * }
     */
    public static int MouseDown() {
        return MouseDown;
    }
    private static final int MouseUp = (int)8L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.MouseUp = 8
     * }
     */
    public static int MouseUp() {
        return MouseUp;
    }
    private static final int ScrollWheel = (int)9L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.ScrollWheel = 9
     * }
     */
    public static int ScrollWheel() {
        return ScrollWheel;
    }
    private static final int WindowScreenChange = (int)10L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.WindowScreenChange = 10
     * }
     */
    public static int WindowScreenChange() {
        return WindowScreenChange;
    }
    private static final int WindowResize = (int)11L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.WindowResize = 11
     * }
     */
    public static int WindowResize() {
        return WindowResize;
    }
    private static final int WindowMove = (int)12L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.WindowMove = 12
     * }
     */
    public static int WindowMove() {
        return WindowMove;
    }
    private static final int WindowFocusChange = (int)13L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.WindowFocusChange = 13
     * }
     */
    public static int WindowFocusChange() {
        return WindowFocusChange;
    }
    private static final int WindowCloseRequest = (int)14L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.WindowCloseRequest = 14
     * }
     */
    public static int WindowCloseRequest() {
        return WindowCloseRequest;
    }
    private static final int WindowFullScreenToggle = (int)15L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.WindowFullScreenToggle = 15
     * }
     */
    public static int WindowFullScreenToggle() {
        return WindowFullScreenToggle;
    }
    private static final int DisplayConfigurationChange = (int)16L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.DisplayConfigurationChange = 16
     * }
     */
    public static int DisplayConfigurationChange() {
        return DisplayConfigurationChange;
    }
    private static final int ApplicationDidFinishLaunching = (int)17L;
    /**
     * {@snippet lang=c :
     * enum Event_Tag.ApplicationDidFinishLaunching = 17
     * }
     */
    public static int ApplicationDidFinishLaunching() {
        return ApplicationDidFinishLaunching;
    }
    /**
     * {@snippet lang=c :
     * typedef const char *ConstStrPtr
     * }
     */
    public static final AddressLayout ConstStrPtr = desktop_macos_h.C_POINTER;
    private static final int TextCommand = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TextOperation_Tag.TextCommand = 0
     * }
     */
    public static int TextCommand() {
        return TextCommand;
    }
    private static final int TextChanged = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TextOperation_Tag.TextChanged = 1
     * }
     */
    public static int TextChanged() {
        return TextChanged;
    }
    /**
     * {@snippet lang=c :
     * typedef void *MetalDeviceRef
     * }
     */
    public static final AddressLayout MetalDeviceRef = desktop_macos_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *MetalCommandQueueRef
     * }
     */
    public static final AddressLayout MetalCommandQueueRef = desktop_macos_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef double PhysicalPixels
     * }
     */
    public static final OfDouble PhysicalPixels = desktop_macos_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef void *MetalTextureRef
     * }
     */
    public static final AddressLayout MetalTextureRef = desktop_macos_h.C_POINTER;
    private static final int Transparent = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WindowBackground_Tag.Transparent = 0
     * }
     */
    public static int Transparent() {
        return Transparent;
    }
    private static final int SolidColor = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WindowBackground_Tag.SolidColor = 1
     * }
     */
    public static int SolidColor() {
        return SolidColor;
    }
    private static final int VisualEffect = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WindowBackground_Tag.VisualEffect = 2
     * }
     */
    public static int VisualEffect() {
        return VisualEffect;
    }
    /**
     * {@snippet lang=c :
     * typedef int64_t ArraySize
     * }
     */
    public static final OfLong ArraySize = desktop_macos_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint32_t MouseButtonsSet
     * }
     */
    public static final OfInt MouseButtonsSet = desktop_macos_h.C_INT;
    private static final int ActionItem = (int)0L;
    /**
     * {@snippet lang=c :
     * enum AppMenuItem_Tag.ActionItem = 0
     * }
     */
    public static int ActionItem() {
        return ActionItem;
    }
    private static final int SeparatorItem = (int)1L;
    /**
     * {@snippet lang=c :
     * enum AppMenuItem_Tag.SeparatorItem = 1
     * }
     */
    public static int SeparatorItem() {
        return SeparatorItem;
    }
    private static final int SubMenuItem = (int)2L;
    /**
     * {@snippet lang=c :
     * enum AppMenuItem_Tag.SubMenuItem = 2
     * }
     */
    public static int SubMenuItem() {
        return SubMenuItem;
    }

    private static class dispatcher_is_main_thread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_BOOL    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("dispatcher_is_main_thread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static FunctionDescriptor dispatcher_is_main_thread$descriptor() {
        return dispatcher_is_main_thread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static MethodHandle dispatcher_is_main_thread$handle() {
        return dispatcher_is_main_thread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static MemorySegment dispatcher_is_main_thread$address() {
        return dispatcher_is_main_thread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static boolean dispatcher_is_main_thread() {
        var mh$ = dispatcher_is_main_thread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dispatcher_is_main_thread");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class dispatcher_main_exec_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("dispatcher_main_exec_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static FunctionDescriptor dispatcher_main_exec_async$descriptor() {
        return dispatcher_main_exec_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static MethodHandle dispatcher_main_exec_async$handle() {
        return dispatcher_main_exec_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static MemorySegment dispatcher_main_exec_async$address() {
        return dispatcher_main_exec_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static void dispatcher_main_exec_async(MemorySegment f) {
        var mh$ = dispatcher_main_exec_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dispatcher_main_exec_async", f);
            }
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            ApplicationCallbacks.layout()
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("application_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_init(const struct ApplicationConfig *config, struct ApplicationCallbacks callbacks)
     * }
     */
    public static FunctionDescriptor application_init$descriptor() {
        return application_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_init(const struct ApplicationConfig *config, struct ApplicationCallbacks callbacks)
     * }
     */
    public static MethodHandle application_init$handle() {
        return application_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_init(const struct ApplicationConfig *config, struct ApplicationCallbacks callbacks)
     * }
     */
    public static MemorySegment application_init$address() {
        return application_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_init(const struct ApplicationConfig *config, struct ApplicationCallbacks callbacks)
     * }
     */
    public static void application_init(MemorySegment config, MemorySegment callbacks) {
        var mh$ = application_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_init", config, callbacks);
            }
            mh$.invokeExact(config, callbacks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("application_shutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_shutdown()
     * }
     */
    public static FunctionDescriptor application_shutdown$descriptor() {
        return application_shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_shutdown()
     * }
     */
    public static MethodHandle application_shutdown$handle() {
        return application_shutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_shutdown()
     * }
     */
    public static MemorySegment application_shutdown$address() {
        return application_shutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_shutdown()
     * }
     */
    public static void application_shutdown() {
        var mh$ = application_shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_shutdown");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_run_event_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("application_run_event_loop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static FunctionDescriptor application_run_event_loop$descriptor() {
        return application_run_event_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static MethodHandle application_run_event_loop$handle() {
        return application_run_event_loop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static MemorySegment application_run_event_loop$address() {
        return application_run_event_loop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static void application_run_event_loop() {
        var mh$ = application_run_event_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_run_event_loop");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_stop_event_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("application_stop_event_loop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_stop_event_loop()
     * }
     */
    public static FunctionDescriptor application_stop_event_loop$descriptor() {
        return application_stop_event_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_stop_event_loop()
     * }
     */
    public static MethodHandle application_stop_event_loop$handle() {
        return application_stop_event_loop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_stop_event_loop()
     * }
     */
    public static MemorySegment application_stop_event_loop$address() {
        return application_stop_event_loop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_stop_event_loop()
     * }
     */
    public static void application_stop_event_loop() {
        var mh$ = application_stop_event_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_stop_event_loop");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_request_termination {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("application_request_termination");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_request_termination()
     * }
     */
    public static FunctionDescriptor application_request_termination$descriptor() {
        return application_request_termination.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_request_termination()
     * }
     */
    public static MethodHandle application_request_termination$handle() {
        return application_request_termination.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_request_termination()
     * }
     */
    public static MemorySegment application_request_termination$address() {
        return application_request_termination.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_request_termination()
     * }
     */
    public static void application_request_termination() {
        var mh$ = application_request_termination.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_request_termination");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_create_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_POINTER    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_create_device");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MetalDeviceRef metal_create_device()
     * }
     */
    public static FunctionDescriptor metal_create_device$descriptor() {
        return metal_create_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MetalDeviceRef metal_create_device()
     * }
     */
    public static MethodHandle metal_create_device$handle() {
        return metal_create_device.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MetalDeviceRef metal_create_device()
     * }
     */
    public static MemorySegment metal_create_device$address() {
        return metal_create_device.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MetalDeviceRef metal_create_device()
     * }
     */
    public static MemorySegment metal_create_device() {
        var mh$ = metal_create_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_create_device");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_deref_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_deref_device");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_deref_device(MetalDeviceRef device)
     * }
     */
    public static FunctionDescriptor metal_deref_device$descriptor() {
        return metal_deref_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_deref_device(MetalDeviceRef device)
     * }
     */
    public static MethodHandle metal_deref_device$handle() {
        return metal_deref_device.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_deref_device(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_deref_device$address() {
        return metal_deref_device.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_deref_device(MetalDeviceRef device)
     * }
     */
    public static void metal_deref_device(MemorySegment device) {
        var mh$ = metal_deref_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_deref_device", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_create_command_queue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_create_command_queue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MetalCommandQueueRef metal_create_command_queue(MetalDeviceRef device)
     * }
     */
    public static FunctionDescriptor metal_create_command_queue$descriptor() {
        return metal_create_command_queue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MetalCommandQueueRef metal_create_command_queue(MetalDeviceRef device)
     * }
     */
    public static MethodHandle metal_create_command_queue$handle() {
        return metal_create_command_queue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MetalCommandQueueRef metal_create_command_queue(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_create_command_queue$address() {
        return metal_create_command_queue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MetalCommandQueueRef metal_create_command_queue(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_create_command_queue(MemorySegment device) {
        var mh$ = metal_create_command_queue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_create_command_queue", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_deref_command_queue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_deref_command_queue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_deref_command_queue(MetalCommandQueueRef queue)
     * }
     */
    public static FunctionDescriptor metal_deref_command_queue$descriptor() {
        return metal_deref_command_queue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_deref_command_queue(MetalCommandQueueRef queue)
     * }
     */
    public static MethodHandle metal_deref_command_queue$handle() {
        return metal_deref_command_queue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_deref_command_queue(MetalCommandQueueRef queue)
     * }
     */
    public static MemorySegment metal_deref_command_queue$address() {
        return metal_deref_command_queue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_deref_command_queue(MetalCommandQueueRef queue)
     * }
     */
    public static void metal_deref_command_queue(MemorySegment queue) {
        var mh$ = metal_deref_command_queue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_deref_command_queue", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_create_view {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_create_view");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct MetalView *metal_create_view(MetalDeviceRef device)
     * }
     */
    public static FunctionDescriptor metal_create_view$descriptor() {
        return metal_create_view.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct MetalView *metal_create_view(MetalDeviceRef device)
     * }
     */
    public static MethodHandle metal_create_view$handle() {
        return metal_create_view.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct MetalView *metal_create_view(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_create_view$address() {
        return metal_create_view.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct MetalView *metal_create_view(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_create_view(MemorySegment device) {
        var mh$ = metal_create_view.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_create_view", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_drop_view {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_drop_view");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_drop_view(struct MetalView *view)
     * }
     */
    public static FunctionDescriptor metal_drop_view$descriptor() {
        return metal_drop_view.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_drop_view(struct MetalView *view)
     * }
     */
    public static MethodHandle metal_drop_view$handle() {
        return metal_drop_view.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_drop_view(struct MetalView *view)
     * }
     */
    public static MemorySegment metal_drop_view$address() {
        return metal_drop_view.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_drop_view(struct MetalView *view)
     * }
     */
    public static void metal_drop_view(MemorySegment view) {
        var mh$ = metal_drop_view.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_drop_view", view);
            }
            mh$.invokeExact(view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_view_set_is_opaque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_BOOL
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_view_set_is_opaque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_view_set_is_opaque(const struct MetalView *view, bool value)
     * }
     */
    public static FunctionDescriptor metal_view_set_is_opaque$descriptor() {
        return metal_view_set_is_opaque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_view_set_is_opaque(const struct MetalView *view, bool value)
     * }
     */
    public static MethodHandle metal_view_set_is_opaque$handle() {
        return metal_view_set_is_opaque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_view_set_is_opaque(const struct MetalView *view, bool value)
     * }
     */
    public static MemorySegment metal_view_set_is_opaque$address() {
        return metal_view_set_is_opaque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_view_set_is_opaque(const struct MetalView *view, bool value)
     * }
     */
    public static void metal_view_set_is_opaque(MemorySegment view, boolean value) {
        var mh$ = metal_view_set_is_opaque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_view_set_is_opaque", view, value);
            }
            mh$.invokeExact(view, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_view_get_is_opaque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_BOOL,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_view_get_is_opaque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool metal_view_get_is_opaque(const struct MetalView *view)
     * }
     */
    public static FunctionDescriptor metal_view_get_is_opaque$descriptor() {
        return metal_view_get_is_opaque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool metal_view_get_is_opaque(const struct MetalView *view)
     * }
     */
    public static MethodHandle metal_view_get_is_opaque$handle() {
        return metal_view_get_is_opaque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool metal_view_get_is_opaque(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_get_is_opaque$address() {
        return metal_view_get_is_opaque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool metal_view_get_is_opaque(const struct MetalView *view)
     * }
     */
    public static boolean metal_view_get_is_opaque(MemorySegment view) {
        var mh$ = metal_view_get_is_opaque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_view_get_is_opaque", view);
            }
            return (boolean)mh$.invokeExact(view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_view_present {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_BOOL
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_view_present");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_view_present(const struct MetalView *view, MetalCommandQueueRef queue, bool wait_for_ca_transaction)
     * }
     */
    public static FunctionDescriptor metal_view_present$descriptor() {
        return metal_view_present.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_view_present(const struct MetalView *view, MetalCommandQueueRef queue, bool wait_for_ca_transaction)
     * }
     */
    public static MethodHandle metal_view_present$handle() {
        return metal_view_present.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_view_present(const struct MetalView *view, MetalCommandQueueRef queue, bool wait_for_ca_transaction)
     * }
     */
    public static MemorySegment metal_view_present$address() {
        return metal_view_present.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_view_present(const struct MetalView *view, MetalCommandQueueRef queue, bool wait_for_ca_transaction)
     * }
     */
    public static void metal_view_present(MemorySegment view, MemorySegment queue, boolean wait_for_ca_transaction) {
        var mh$ = metal_view_present.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_view_present", view, queue, wait_for_ca_transaction);
            }
            mh$.invokeExact(view, queue, wait_for_ca_transaction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_view_get_texture_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PhysicalSize.layout(),
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_view_get_texture_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct PhysicalSize metal_view_get_texture_size(const struct MetalView *view)
     * }
     */
    public static FunctionDescriptor metal_view_get_texture_size$descriptor() {
        return metal_view_get_texture_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct PhysicalSize metal_view_get_texture_size(const struct MetalView *view)
     * }
     */
    public static MethodHandle metal_view_get_texture_size$handle() {
        return metal_view_get_texture_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct PhysicalSize metal_view_get_texture_size(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_get_texture_size$address() {
        return metal_view_get_texture_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct PhysicalSize metal_view_get_texture_size(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_get_texture_size(SegmentAllocator allocator, MemorySegment view) {
        var mh$ = metal_view_get_texture_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_view_get_texture_size", allocator, view);
            }
            return (MemorySegment)mh$.invokeExact(allocator, view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_view_next_texture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_view_next_texture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MetalTextureRef metal_view_next_texture(const struct MetalView *view)
     * }
     */
    public static FunctionDescriptor metal_view_next_texture$descriptor() {
        return metal_view_next_texture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MetalTextureRef metal_view_next_texture(const struct MetalView *view)
     * }
     */
    public static MethodHandle metal_view_next_texture$handle() {
        return metal_view_next_texture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MetalTextureRef metal_view_next_texture(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_next_texture$address() {
        return metal_view_next_texture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MetalTextureRef metal_view_next_texture(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_next_texture(MemorySegment view) {
        var mh$ = metal_view_next_texture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_view_next_texture", view);
            }
            return (MemorySegment)mh$.invokeExact(view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_deref_texture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("metal_deref_texture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_deref_texture(MetalTextureRef texture)
     * }
     */
    public static FunctionDescriptor metal_deref_texture$descriptor() {
        return metal_deref_texture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_deref_texture(MetalTextureRef texture)
     * }
     */
    public static MethodHandle metal_deref_texture$handle() {
        return metal_deref_texture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_deref_texture(MetalTextureRef texture)
     * }
     */
    public static MemorySegment metal_deref_texture$address() {
        return metal_deref_texture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_deref_texture(MetalTextureRef texture)
     * }
     */
    public static void metal_deref_texture(MemorySegment texture) {
        var mh$ = metal_deref_texture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_deref_texture", texture);
            }
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class display_link_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_INT,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("display_link_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct DisplayLinkBox *display_link_create(ScreenId screen_id, DisplayLinkCallback on_next_frame)
     * }
     */
    public static FunctionDescriptor display_link_create$descriptor() {
        return display_link_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct DisplayLinkBox *display_link_create(ScreenId screen_id, DisplayLinkCallback on_next_frame)
     * }
     */
    public static MethodHandle display_link_create$handle() {
        return display_link_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct DisplayLinkBox *display_link_create(ScreenId screen_id, DisplayLinkCallback on_next_frame)
     * }
     */
    public static MemorySegment display_link_create$address() {
        return display_link_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct DisplayLinkBox *display_link_create(ScreenId screen_id, DisplayLinkCallback on_next_frame)
     * }
     */
    public static MemorySegment display_link_create(int screen_id, MemorySegment on_next_frame) {
        var mh$ = display_link_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("display_link_create", screen_id, on_next_frame);
            }
            return (MemorySegment)mh$.invokeExact(screen_id, on_next_frame);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class display_link_drop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("display_link_drop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void display_link_drop(struct DisplayLinkBox *display_link)
     * }
     */
    public static FunctionDescriptor display_link_drop$descriptor() {
        return display_link_drop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void display_link_drop(struct DisplayLinkBox *display_link)
     * }
     */
    public static MethodHandle display_link_drop$handle() {
        return display_link_drop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void display_link_drop(struct DisplayLinkBox *display_link)
     * }
     */
    public static MemorySegment display_link_drop$address() {
        return display_link_drop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void display_link_drop(struct DisplayLinkBox *display_link)
     * }
     */
    public static void display_link_drop(MemorySegment display_link) {
        var mh$ = display_link_drop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("display_link_drop", display_link);
            }
            mh$.invokeExact(display_link);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class display_link_set_running {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_BOOL
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("display_link_set_running");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void display_link_set_running(struct DisplayLinkBox *display_link, bool value)
     * }
     */
    public static FunctionDescriptor display_link_set_running$descriptor() {
        return display_link_set_running.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void display_link_set_running(struct DisplayLinkBox *display_link, bool value)
     * }
     */
    public static MethodHandle display_link_set_running$handle() {
        return display_link_set_running.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void display_link_set_running(struct DisplayLinkBox *display_link, bool value)
     * }
     */
    public static MemorySegment display_link_set_running$address() {
        return display_link_set_running.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void display_link_set_running(struct DisplayLinkBox *display_link, bool value)
     * }
     */
    public static void display_link_set_running(MemorySegment display_link, boolean value) {
        var mh$ = display_link_set_running.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("display_link_set_running", display_link, value);
            }
            mh$.invokeExact(display_link, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class display_link_is_running {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_BOOL,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("display_link_is_running");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool display_link_is_running(struct DisplayLinkBox *display_link)
     * }
     */
    public static FunctionDescriptor display_link_is_running$descriptor() {
        return display_link_is_running.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool display_link_is_running(struct DisplayLinkBox *display_link)
     * }
     */
    public static MethodHandle display_link_is_running$handle() {
        return display_link_is_running.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool display_link_is_running(struct DisplayLinkBox *display_link)
     * }
     */
    public static MemorySegment display_link_is_running$address() {
        return display_link_is_running.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool display_link_is_running(struct DisplayLinkBox *display_link)
     * }
     */
    public static boolean display_link_is_running(MemorySegment display_link) {
        var mh$ = display_link_is_running.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("display_link_is_running", display_link);
            }
            return (boolean)mh$.invokeExact(display_link);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct Window *window_create(const struct WindowParams *params)
     * }
     */
    public static FunctionDescriptor window_create$descriptor() {
        return window_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct Window *window_create(const struct WindowParams *params)
     * }
     */
    public static MethodHandle window_create$handle() {
        return window_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct Window *window_create(const struct WindowParams *params)
     * }
     */
    public static MemorySegment window_create$address() {
        return window_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct Window *window_create(const struct WindowParams *params)
     * }
     */
    public static MemorySegment window_create(MemorySegment params) {
        var mh$ = window_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_create", params);
            }
            return (MemorySegment)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_drop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_drop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_drop(struct Window *window)
     * }
     */
    public static FunctionDescriptor window_drop$descriptor() {
        return window_drop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_drop(struct Window *window)
     * }
     */
    public static MethodHandle window_drop$handle() {
        return window_drop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_drop(struct Window *window)
     * }
     */
    public static MemorySegment window_drop$address() {
        return window_drop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_drop(struct Window *window)
     * }
     */
    public static void window_drop(MemorySegment window) {
        var mh$ = window_drop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_drop", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_get_window_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_LONG_LONG,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_get_window_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WindowId window_get_window_id(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_get_window_id$descriptor() {
        return window_get_window_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WindowId window_get_window_id(const struct Window *window)
     * }
     */
    public static MethodHandle window_get_window_id$handle() {
        return window_get_window_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WindowId window_get_window_id(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_window_id$address() {
        return window_get_window_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WindowId window_get_window_id(const struct Window *window)
     * }
     */
    public static long window_get_window_id(MemorySegment window) {
        var mh$ = window_get_window_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_get_window_id", window);
            }
            return (long)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_get_screen_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_INT,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_get_screen_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ScreenId window_get_screen_id(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_get_screen_id$descriptor() {
        return window_get_screen_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ScreenId window_get_screen_id(const struct Window *window)
     * }
     */
    public static MethodHandle window_get_screen_id$handle() {
        return window_get_screen_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ScreenId window_get_screen_id(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_screen_id$address() {
        return window_get_screen_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ScreenId window_get_screen_id(const struct Window *window)
     * }
     */
    public static int window_get_screen_id(MemorySegment window) {
        var mh$ = window_get_screen_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_get_screen_id", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_scale_factor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_DOUBLE,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_scale_factor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double window_scale_factor(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_scale_factor$descriptor() {
        return window_scale_factor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double window_scale_factor(const struct Window *window)
     * }
     */
    public static MethodHandle window_scale_factor$handle() {
        return window_scale_factor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double window_scale_factor(const struct Window *window)
     * }
     */
    public static MemorySegment window_scale_factor$address() {
        return window_scale_factor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double window_scale_factor(const struct Window *window)
     * }
     */
    public static double window_scale_factor(MemorySegment window) {
        var mh$ = window_scale_factor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_scale_factor", window);
            }
            return (double)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_attach_layer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_attach_layer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_attach_layer(const struct Window *window, const struct MetalView *layer)
     * }
     */
    public static FunctionDescriptor window_attach_layer$descriptor() {
        return window_attach_layer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_attach_layer(const struct Window *window, const struct MetalView *layer)
     * }
     */
    public static MethodHandle window_attach_layer$handle() {
        return window_attach_layer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_attach_layer(const struct Window *window, const struct MetalView *layer)
     * }
     */
    public static MemorySegment window_attach_layer$address() {
        return window_attach_layer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_attach_layer(const struct Window *window, const struct MetalView *layer)
     * }
     */
    public static void window_attach_layer(MemorySegment window, MemorySegment layer) {
        var mh$ = window_attach_layer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_attach_layer", window, layer);
            }
            mh$.invokeExact(window, layer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_set_title");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_set_title(const struct Window *window, StrPtr new_title)
     * }
     */
    public static FunctionDescriptor window_set_title$descriptor() {
        return window_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_set_title(const struct Window *window, StrPtr new_title)
     * }
     */
    public static MethodHandle window_set_title$handle() {
        return window_set_title.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_set_title(const struct Window *window, StrPtr new_title)
     * }
     */
    public static MemorySegment window_set_title$address() {
        return window_set_title.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_set_title(const struct Window *window, StrPtr new_title)
     * }
     */
    public static void window_set_title(MemorySegment window, MemorySegment new_title) {
        var mh$ = window_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_set_title", window, new_title);
            }
            mh$.invokeExact(window, new_title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_POINTER,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_get_title");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * StrPtr window_get_title(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_get_title$descriptor() {
        return window_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * StrPtr window_get_title(const struct Window *window)
     * }
     */
    public static MethodHandle window_get_title$handle() {
        return window_get_title.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * StrPtr window_get_title(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_title$address() {
        return window_get_title.ADDR;
    }

    /**
     * {@snippet lang=c :
     * StrPtr window_get_title(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_title(MemorySegment window) {
        var mh$ = window_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_get_title", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_get_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LogicalPoint.layout(),
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_get_origin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct LogicalPoint window_get_origin(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_get_origin$descriptor() {
        return window_get_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct LogicalPoint window_get_origin(const struct Window *window)
     * }
     */
    public static MethodHandle window_get_origin$handle() {
        return window_get_origin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct LogicalPoint window_get_origin(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_origin$address() {
        return window_get_origin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct LogicalPoint window_get_origin(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_origin(SegmentAllocator allocator, MemorySegment window) {
        var mh$ = window_get_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_get_origin", allocator, window);
            }
            return (MemorySegment)mh$.invokeExact(allocator, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LogicalSize.layout(),
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_get_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_size(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_get_size$descriptor() {
        return window_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_size(const struct Window *window)
     * }
     */
    public static MethodHandle window_get_size$handle() {
        return window_get_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_size(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_size$address() {
        return window_get_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct LogicalSize window_get_size(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_size(SegmentAllocator allocator, MemorySegment window) {
        var mh$ = window_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_get_size", allocator, window);
            }
            return (MemorySegment)mh$.invokeExact(allocator, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_set_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            LogicalPoint.layout(),
            LogicalSize.layout(),
            desktop_macos_h.C_BOOL
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_set_rect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_set_rect(const struct Window *window, struct LogicalPoint origin, struct LogicalSize size, bool animate)
     * }
     */
    public static FunctionDescriptor window_set_rect$descriptor() {
        return window_set_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_set_rect(const struct Window *window, struct LogicalPoint origin, struct LogicalSize size, bool animate)
     * }
     */
    public static MethodHandle window_set_rect$handle() {
        return window_set_rect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_set_rect(const struct Window *window, struct LogicalPoint origin, struct LogicalSize size, bool animate)
     * }
     */
    public static MemorySegment window_set_rect$address() {
        return window_set_rect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_set_rect(const struct Window *window, struct LogicalPoint origin, struct LogicalSize size, bool animate)
     * }
     */
    public static void window_set_rect(MemorySegment window, MemorySegment origin, MemorySegment size, boolean animate) {
        var mh$ = window_set_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_set_rect", window, origin, size, animate);
            }
            mh$.invokeExact(window, origin, size, animate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_get_content_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LogicalPoint.layout(),
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_get_content_origin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct LogicalPoint window_get_content_origin(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_get_content_origin$descriptor() {
        return window_get_content_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct LogicalPoint window_get_content_origin(const struct Window *window)
     * }
     */
    public static MethodHandle window_get_content_origin$handle() {
        return window_get_content_origin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct LogicalPoint window_get_content_origin(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_content_origin$address() {
        return window_get_content_origin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct LogicalPoint window_get_content_origin(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_content_origin(SegmentAllocator allocator, MemorySegment window) {
        var mh$ = window_get_content_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_get_content_origin", allocator, window);
            }
            return (MemorySegment)mh$.invokeExact(allocator, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_get_content_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LogicalSize.layout(),
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_get_content_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_content_size(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_get_content_size$descriptor() {
        return window_get_content_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_content_size(const struct Window *window)
     * }
     */
    public static MethodHandle window_get_content_size$handle() {
        return window_get_content_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_content_size(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_content_size$address() {
        return window_get_content_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct LogicalSize window_get_content_size(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_content_size(SegmentAllocator allocator, MemorySegment window) {
        var mh$ = window_get_content_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_get_content_size", allocator, window);
            }
            return (MemorySegment)mh$.invokeExact(allocator, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_set_content_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            LogicalPoint.layout(),
            LogicalSize.layout(),
            desktop_macos_h.C_BOOL
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_set_content_rect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_set_content_rect(const struct Window *window, struct LogicalPoint origin, struct LogicalSize size, bool animate)
     * }
     */
    public static FunctionDescriptor window_set_content_rect$descriptor() {
        return window_set_content_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_set_content_rect(const struct Window *window, struct LogicalPoint origin, struct LogicalSize size, bool animate)
     * }
     */
    public static MethodHandle window_set_content_rect$handle() {
        return window_set_content_rect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_set_content_rect(const struct Window *window, struct LogicalPoint origin, struct LogicalSize size, bool animate)
     * }
     */
    public static MemorySegment window_set_content_rect$address() {
        return window_set_content_rect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_set_content_rect(const struct Window *window, struct LogicalPoint origin, struct LogicalSize size, bool animate)
     * }
     */
    public static void window_set_content_rect(MemorySegment window, MemorySegment origin, MemorySegment size, boolean animate) {
        var mh$ = window_set_content_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_set_content_rect", window, origin, size, animate);
            }
            mh$.invokeExact(window, origin, size, animate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_is_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_BOOL,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_is_key");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool window_is_key(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_is_key$descriptor() {
        return window_is_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool window_is_key(const struct Window *window)
     * }
     */
    public static MethodHandle window_is_key$handle() {
        return window_is_key.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool window_is_key(const struct Window *window)
     * }
     */
    public static MemorySegment window_is_key$address() {
        return window_is_key.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool window_is_key(const struct Window *window)
     * }
     */
    public static boolean window_is_key(MemorySegment window) {
        var mh$ = window_is_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_is_key", window);
            }
            return (boolean)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_is_main {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_BOOL,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_is_main");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool window_is_main(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_is_main$descriptor() {
        return window_is_main.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool window_is_main(const struct Window *window)
     * }
     */
    public static MethodHandle window_is_main$handle() {
        return window_is_main.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool window_is_main(const struct Window *window)
     * }
     */
    public static MemorySegment window_is_main$address() {
        return window_is_main.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool window_is_main(const struct Window *window)
     * }
     */
    public static boolean window_is_main(MemorySegment window) {
        var mh$ = window_is_main.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_is_main", window);
            }
            return (boolean)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_get_max_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LogicalSize.layout(),
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_get_max_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_max_size(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_get_max_size$descriptor() {
        return window_get_max_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_max_size(const struct Window *window)
     * }
     */
    public static MethodHandle window_get_max_size$handle() {
        return window_get_max_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_max_size(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_max_size$address() {
        return window_get_max_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct LogicalSize window_get_max_size(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_max_size(SegmentAllocator allocator, MemorySegment window) {
        var mh$ = window_get_max_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_get_max_size", allocator, window);
            }
            return (MemorySegment)mh$.invokeExact(allocator, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_set_max_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            LogicalSize.layout()
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_set_max_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_set_max_size(const struct Window *window, struct LogicalSize size)
     * }
     */
    public static FunctionDescriptor window_set_max_size$descriptor() {
        return window_set_max_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_set_max_size(const struct Window *window, struct LogicalSize size)
     * }
     */
    public static MethodHandle window_set_max_size$handle() {
        return window_set_max_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_set_max_size(const struct Window *window, struct LogicalSize size)
     * }
     */
    public static MemorySegment window_set_max_size$address() {
        return window_set_max_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_set_max_size(const struct Window *window, struct LogicalSize size)
     * }
     */
    public static void window_set_max_size(MemorySegment window, MemorySegment size) {
        var mh$ = window_set_max_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_set_max_size", window, size);
            }
            mh$.invokeExact(window, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_get_min_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LogicalSize.layout(),
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_get_min_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_min_size(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_get_min_size$descriptor() {
        return window_get_min_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_min_size(const struct Window *window)
     * }
     */
    public static MethodHandle window_get_min_size$handle() {
        return window_get_min_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct LogicalSize window_get_min_size(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_min_size$address() {
        return window_get_min_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct LogicalSize window_get_min_size(const struct Window *window)
     * }
     */
    public static MemorySegment window_get_min_size(SegmentAllocator allocator, MemorySegment window) {
        var mh$ = window_get_min_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_get_min_size", allocator, window);
            }
            return (MemorySegment)mh$.invokeExact(allocator, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_set_min_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            LogicalSize.layout()
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_set_min_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_set_min_size(const struct Window *window, struct LogicalSize size)
     * }
     */
    public static FunctionDescriptor window_set_min_size$descriptor() {
        return window_set_min_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_set_min_size(const struct Window *window, struct LogicalSize size)
     * }
     */
    public static MethodHandle window_set_min_size$handle() {
        return window_set_min_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_set_min_size(const struct Window *window, struct LogicalSize size)
     * }
     */
    public static MemorySegment window_set_min_size$address() {
        return window_set_min_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_set_min_size(const struct Window *window, struct LogicalSize size)
     * }
     */
    public static void window_set_min_size(MemorySegment window, MemorySegment size) {
        var mh$ = window_set_min_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_set_min_size", window, size);
            }
            mh$.invokeExact(window, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_toggle_full_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_toggle_full_screen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_toggle_full_screen(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_toggle_full_screen$descriptor() {
        return window_toggle_full_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_toggle_full_screen(const struct Window *window)
     * }
     */
    public static MethodHandle window_toggle_full_screen$handle() {
        return window_toggle_full_screen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_toggle_full_screen(const struct Window *window)
     * }
     */
    public static MemorySegment window_toggle_full_screen$address() {
        return window_toggle_full_screen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_toggle_full_screen(const struct Window *window)
     * }
     */
    public static void window_toggle_full_screen(MemorySegment window) {
        var mh$ = window_toggle_full_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_toggle_full_screen", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_is_full_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_BOOL,
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_is_full_screen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool window_is_full_screen(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_is_full_screen$descriptor() {
        return window_is_full_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool window_is_full_screen(const struct Window *window)
     * }
     */
    public static MethodHandle window_is_full_screen$handle() {
        return window_is_full_screen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool window_is_full_screen(const struct Window *window)
     * }
     */
    public static MemorySegment window_is_full_screen$address() {
        return window_is_full_screen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool window_is_full_screen(const struct Window *window)
     * }
     */
    public static boolean window_is_full_screen(MemorySegment window) {
        var mh$ = window_is_full_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_is_full_screen", window);
            }
            return (boolean)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_start_drag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_start_drag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_start_drag(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_start_drag$descriptor() {
        return window_start_drag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_start_drag(const struct Window *window)
     * }
     */
    public static MethodHandle window_start_drag$handle() {
        return window_start_drag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_start_drag(const struct Window *window)
     * }
     */
    public static MemorySegment window_start_drag$address() {
        return window_start_drag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_start_drag(const struct Window *window)
     * }
     */
    public static void window_start_drag(MemorySegment window) {
        var mh$ = window_start_drag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_start_drag", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_invalidate_shadow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_invalidate_shadow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_invalidate_shadow(const struct Window *window)
     * }
     */
    public static FunctionDescriptor window_invalidate_shadow$descriptor() {
        return window_invalidate_shadow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_invalidate_shadow(const struct Window *window)
     * }
     */
    public static MethodHandle window_invalidate_shadow$handle() {
        return window_invalidate_shadow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_invalidate_shadow(const struct Window *window)
     * }
     */
    public static MemorySegment window_invalidate_shadow$address() {
        return window_invalidate_shadow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_invalidate_shadow(const struct Window *window)
     * }
     */
    public static void window_invalidate_shadow(MemorySegment window) {
        var mh$ = window_invalidate_shadow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_invalidate_shadow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_set_background {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER,
            WindowBackground.layout()
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("window_set_background");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_set_background(const struct Window *window, struct WindowBackground background)
     * }
     */
    public static FunctionDescriptor window_set_background$descriptor() {
        return window_set_background.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_set_background(const struct Window *window, struct WindowBackground background)
     * }
     */
    public static MethodHandle window_set_background$handle() {
        return window_set_background.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_set_background(const struct Window *window, struct WindowBackground background)
     * }
     */
    public static MemorySegment window_set_background$address() {
        return window_set_background.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_set_background(const struct Window *window, struct WindowBackground background)
     * }
     */
    public static void window_set_background(MemorySegment window, MemorySegment background) {
        var mh$ = window_set_background.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_set_background", window, background);
            }
            mh$.invokeExact(window, background);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class screen_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ScreenInfoArray.layout()    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("screen_list");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ScreenInfoArray screen_list()
     * }
     */
    public static FunctionDescriptor screen_list$descriptor() {
        return screen_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ScreenInfoArray screen_list()
     * }
     */
    public static MethodHandle screen_list$handle() {
        return screen_list.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ScreenInfoArray screen_list()
     * }
     */
    public static MemorySegment screen_list$address() {
        return screen_list.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ScreenInfoArray screen_list()
     * }
     */
    public static MemorySegment screen_list(SegmentAllocator allocator) {
        var mh$ = screen_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("screen_list", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class screen_list_drop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ScreenInfoArray.layout()
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("screen_list_drop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void screen_list_drop(struct ScreenInfoArray arr)
     * }
     */
    public static FunctionDescriptor screen_list_drop$descriptor() {
        return screen_list_drop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void screen_list_drop(struct ScreenInfoArray arr)
     * }
     */
    public static MethodHandle screen_list_drop$handle() {
        return screen_list_drop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void screen_list_drop(struct ScreenInfoArray arr)
     * }
     */
    public static MemorySegment screen_list_drop$address() {
        return screen_list_drop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void screen_list_drop(struct ScreenInfoArray arr)
     * }
     */
    public static void screen_list_drop(MemorySegment arr) {
        var mh$ = screen_list_drop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("screen_list_drop", arr);
            }
            mh$.invokeExact(arr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class screen_get_main_screen_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_INT    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("screen_get_main_screen_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ScreenId screen_get_main_screen_id()
     * }
     */
    public static FunctionDescriptor screen_get_main_screen_id$descriptor() {
        return screen_get_main_screen_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ScreenId screen_get_main_screen_id()
     * }
     */
    public static MethodHandle screen_get_main_screen_id$handle() {
        return screen_get_main_screen_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ScreenId screen_get_main_screen_id()
     * }
     */
    public static MemorySegment screen_get_main_screen_id$address() {
        return screen_get_main_screen_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ScreenId screen_get_main_screen_id()
     * }
     */
    public static int screen_get_main_screen_id() {
        var mh$ = screen_get_main_screen_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("screen_get_main_screen_id");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class events_pressed_mouse_buttons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_INT    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("events_pressed_mouse_buttons");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MouseButtonsSet events_pressed_mouse_buttons()
     * }
     */
    public static FunctionDescriptor events_pressed_mouse_buttons$descriptor() {
        return events_pressed_mouse_buttons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MouseButtonsSet events_pressed_mouse_buttons()
     * }
     */
    public static MethodHandle events_pressed_mouse_buttons$handle() {
        return events_pressed_mouse_buttons.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MouseButtonsSet events_pressed_mouse_buttons()
     * }
     */
    public static MemorySegment events_pressed_mouse_buttons$address() {
        return events_pressed_mouse_buttons.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MouseButtonsSet events_pressed_mouse_buttons()
     * }
     */
    public static int events_pressed_mouse_buttons() {
        var mh$ = events_pressed_mouse_buttons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("events_pressed_mouse_buttons");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class events_pressed_modifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            desktop_macos_h.C_INT    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("events_pressed_modifiers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * KeyModifiersSet events_pressed_modifiers()
     * }
     */
    public static FunctionDescriptor events_pressed_modifiers$descriptor() {
        return events_pressed_modifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * KeyModifiersSet events_pressed_modifiers()
     * }
     */
    public static MethodHandle events_pressed_modifiers$handle() {
        return events_pressed_modifiers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * KeyModifiersSet events_pressed_modifiers()
     * }
     */
    public static MemorySegment events_pressed_modifiers$address() {
        return events_pressed_modifiers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * KeyModifiersSet events_pressed_modifiers()
     * }
     */
    public static int events_pressed_modifiers() {
        var mh$ = events_pressed_modifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("events_pressed_modifiers");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class events_cursor_location_in_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            LogicalPoint.layout()    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("events_cursor_location_in_screen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct LogicalPoint events_cursor_location_in_screen()
     * }
     */
    public static FunctionDescriptor events_cursor_location_in_screen$descriptor() {
        return events_cursor_location_in_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct LogicalPoint events_cursor_location_in_screen()
     * }
     */
    public static MethodHandle events_cursor_location_in_screen$handle() {
        return events_cursor_location_in_screen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct LogicalPoint events_cursor_location_in_screen()
     * }
     */
    public static MemorySegment events_cursor_location_in_screen$address() {
        return events_cursor_location_in_screen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct LogicalPoint events_cursor_location_in_screen()
     * }
     */
    public static MemorySegment events_cursor_location_in_screen(SegmentAllocator allocator) {
        var mh$ = events_cursor_location_in_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("events_cursor_location_in_screen", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class main_menu_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            AppMenuStructure.layout()
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("main_menu_update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static FunctionDescriptor main_menu_update$descriptor() {
        return main_menu_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static MethodHandle main_menu_update$handle() {
        return main_menu_update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static MemorySegment main_menu_update$address() {
        return main_menu_update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static void main_menu_update(MemorySegment menu) {
        var mh$ = main_menu_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("main_menu_update", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class main_menu_set_none {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("main_menu_set_none");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void main_menu_set_none()
     * }
     */
    public static FunctionDescriptor main_menu_set_none$descriptor() {
        return main_menu_set_none.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void main_menu_set_none()
     * }
     */
    public static MethodHandle main_menu_set_none$handle() {
        return main_menu_set_none.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void main_menu_set_none()
     * }
     */
    public static MemorySegment main_menu_set_none$address() {
        return main_menu_set_none.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void main_menu_set_none()
     * }
     */
    public static void main_menu_set_none() {
        var mh$ = main_menu_set_none.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("main_menu_set_none");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class string_drop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("string_drop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void string_drop(StrPtr str_ptr)
     * }
     */
    public static FunctionDescriptor string_drop$descriptor() {
        return string_drop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void string_drop(StrPtr str_ptr)
     * }
     */
    public static MethodHandle string_drop$handle() {
        return string_drop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void string_drop(StrPtr str_ptr)
     * }
     */
    public static MemorySegment string_drop$address() {
        return string_drop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void string_drop(StrPtr str_ptr)
     * }
     */
    public static void string_drop(MemorySegment str_ptr) {
        var mh$ = string_drop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("string_drop", str_ptr);
            }
            mh$.invokeExact(str_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class logger_check_exceptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExceptionsArray.layout()    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("logger_check_exceptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExceptionsArray logger_check_exceptions()
     * }
     */
    public static FunctionDescriptor logger_check_exceptions$descriptor() {
        return logger_check_exceptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExceptionsArray logger_check_exceptions()
     * }
     */
    public static MethodHandle logger_check_exceptions$handle() {
        return logger_check_exceptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExceptionsArray logger_check_exceptions()
     * }
     */
    public static MemorySegment logger_check_exceptions$address() {
        return logger_check_exceptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExceptionsArray logger_check_exceptions()
     * }
     */
    public static MemorySegment logger_check_exceptions(SegmentAllocator allocator) {
        var mh$ = logger_check_exceptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("logger_check_exceptions", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class logger_clear_exceptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("logger_clear_exceptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void logger_clear_exceptions()
     * }
     */
    public static FunctionDescriptor logger_clear_exceptions$descriptor() {
        return logger_clear_exceptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void logger_clear_exceptions()
     * }
     */
    public static MethodHandle logger_clear_exceptions$handle() {
        return logger_clear_exceptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void logger_clear_exceptions()
     * }
     */
    public static MemorySegment logger_clear_exceptions$address() {
        return logger_clear_exceptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void logger_clear_exceptions()
     * }
     */
    public static void logger_clear_exceptions() {
        var mh$ = logger_clear_exceptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("logger_clear_exceptions");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class logger_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            desktop_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = desktop_macos_h.findOrThrow("logger_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void logger_init(const struct LoggerConfiguration *logger_configuration)
     * }
     */
    public static FunctionDescriptor logger_init$descriptor() {
        return logger_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void logger_init(const struct LoggerConfiguration *logger_configuration)
     * }
     */
    public static MethodHandle logger_init$handle() {
        return logger_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void logger_init(const struct LoggerConfiguration *logger_configuration)
     * }
     */
    public static MemorySegment logger_init$address() {
        return logger_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void logger_init(const struct LoggerConfiguration *logger_configuration)
     * }
     */
    public static void logger_init(MemorySegment logger_configuration) {
        var mh$ = logger_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("logger_init", logger_configuration);
            }
            mh$.invokeExact(logger_configuration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CapsLockModifier = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define CapsLockModifier 65536
     * }
     */
    public static int CapsLockModifier() {
        return CapsLockModifier;
    }
    private static final int ShiftModifier = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define ShiftModifier 131072
     * }
     */
    public static int ShiftModifier() {
        return ShiftModifier;
    }
    private static final int ControlModifier = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define ControlModifier 262144
     * }
     */
    public static int ControlModifier() {
        return ControlModifier;
    }
    private static final int OptionModifier = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define OptionModifier 524288
     * }
     */
    public static int OptionModifier() {
        return OptionModifier;
    }
    private static final int CommandModifier = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define CommandModifier 1048576
     * }
     */
    public static int CommandModifier() {
        return CommandModifier;
    }
    private static final int NumericPadModifier = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define NumericPadModifier 2097152
     * }
     */
    public static int NumericPadModifier() {
        return NumericPadModifier;
    }
    private static final int HelpModifier = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define HelpModifier 4194304
     * }
     */
    public static int HelpModifier() {
        return HelpModifier;
    }
    private static final int FunctionModifier = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define FunctionModifier 8388608
     * }
     */
    public static int FunctionModifier() {
        return FunctionModifier;
    }
}

