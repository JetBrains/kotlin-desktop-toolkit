// Generated by jextract

package org.jetbrains.kwm.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct KeyModifiers {
 *     bool capslock;
 *     bool shift;
 *     bool control;
 *     bool option;
 *     bool command;
 *     bool numeric_pad;
 *     bool help;
 *     bool function;
 * }
 * }
 */
public class KeyModifiers {

    KeyModifiers() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        kwm_macos_h.C_BOOL.withName("capslock"),
        kwm_macos_h.C_BOOL.withName("shift"),
        kwm_macos_h.C_BOOL.withName("control"),
        kwm_macos_h.C_BOOL.withName("option"),
        kwm_macos_h.C_BOOL.withName("command"),
        kwm_macos_h.C_BOOL.withName("numeric_pad"),
        kwm_macos_h.C_BOOL.withName("help"),
        kwm_macos_h.C_BOOL.withName("function")
    ).withName("KeyModifiers");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean capslock$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("capslock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool capslock
     * }
     */
    public static final OfBoolean capslock$layout() {
        return capslock$LAYOUT;
    }

    private static final long capslock$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool capslock
     * }
     */
    public static final long capslock$offset() {
        return capslock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool capslock
     * }
     */
    public static boolean capslock(MemorySegment struct) {
        return struct.get(capslock$LAYOUT, capslock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool capslock
     * }
     */
    public static void capslock(MemorySegment struct, boolean fieldValue) {
        struct.set(capslock$LAYOUT, capslock$OFFSET, fieldValue);
    }

    private static final OfBoolean shift$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("shift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool shift
     * }
     */
    public static final OfBoolean shift$layout() {
        return shift$LAYOUT;
    }

    private static final long shift$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool shift
     * }
     */
    public static final long shift$offset() {
        return shift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool shift
     * }
     */
    public static boolean shift(MemorySegment struct) {
        return struct.get(shift$LAYOUT, shift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool shift
     * }
     */
    public static void shift(MemorySegment struct, boolean fieldValue) {
        struct.set(shift$LAYOUT, shift$OFFSET, fieldValue);
    }

    private static final OfBoolean control$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("control"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool control
     * }
     */
    public static final OfBoolean control$layout() {
        return control$LAYOUT;
    }

    private static final long control$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool control
     * }
     */
    public static final long control$offset() {
        return control$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool control
     * }
     */
    public static boolean control(MemorySegment struct) {
        return struct.get(control$LAYOUT, control$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool control
     * }
     */
    public static void control(MemorySegment struct, boolean fieldValue) {
        struct.set(control$LAYOUT, control$OFFSET, fieldValue);
    }

    private static final OfBoolean option$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("option"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool option
     * }
     */
    public static final OfBoolean option$layout() {
        return option$LAYOUT;
    }

    private static final long option$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool option
     * }
     */
    public static final long option$offset() {
        return option$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool option
     * }
     */
    public static boolean option(MemorySegment struct) {
        return struct.get(option$LAYOUT, option$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool option
     * }
     */
    public static void option(MemorySegment struct, boolean fieldValue) {
        struct.set(option$LAYOUT, option$OFFSET, fieldValue);
    }

    private static final OfBoolean command$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("command"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool command
     * }
     */
    public static final OfBoolean command$layout() {
        return command$LAYOUT;
    }

    private static final long command$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool command
     * }
     */
    public static final long command$offset() {
        return command$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool command
     * }
     */
    public static boolean command(MemorySegment struct) {
        return struct.get(command$LAYOUT, command$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool command
     * }
     */
    public static void command(MemorySegment struct, boolean fieldValue) {
        struct.set(command$LAYOUT, command$OFFSET, fieldValue);
    }

    private static final OfBoolean numeric_pad$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("numeric_pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool numeric_pad
     * }
     */
    public static final OfBoolean numeric_pad$layout() {
        return numeric_pad$LAYOUT;
    }

    private static final long numeric_pad$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool numeric_pad
     * }
     */
    public static final long numeric_pad$offset() {
        return numeric_pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool numeric_pad
     * }
     */
    public static boolean numeric_pad(MemorySegment struct) {
        return struct.get(numeric_pad$LAYOUT, numeric_pad$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool numeric_pad
     * }
     */
    public static void numeric_pad(MemorySegment struct, boolean fieldValue) {
        struct.set(numeric_pad$LAYOUT, numeric_pad$OFFSET, fieldValue);
    }

    private static final OfBoolean help$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("help"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool help
     * }
     */
    public static final OfBoolean help$layout() {
        return help$LAYOUT;
    }

    private static final long help$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool help
     * }
     */
    public static final long help$offset() {
        return help$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool help
     * }
     */
    public static boolean help(MemorySegment struct) {
        return struct.get(help$LAYOUT, help$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool help
     * }
     */
    public static void help(MemorySegment struct, boolean fieldValue) {
        struct.set(help$LAYOUT, help$OFFSET, fieldValue);
    }

    private static final OfBoolean function$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("function"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool function
     * }
     */
    public static final OfBoolean function$layout() {
        return function$LAYOUT;
    }

    private static final long function$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool function
     * }
     */
    public static final long function$offset() {
        return function$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool function
     * }
     */
    public static boolean function(MemorySegment struct) {
        return struct.get(function$LAYOUT, function$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool function
     * }
     */
    public static void function(MemorySegment struct, boolean fieldValue) {
        struct.set(function$LAYOUT, function$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

