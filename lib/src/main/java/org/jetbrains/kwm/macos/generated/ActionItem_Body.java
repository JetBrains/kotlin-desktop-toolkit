// Generated by jextract

package org.jetbrains.kwm.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ActionItem_Body {
 *     bool enabled;
 *     StrPtr title;
 *     bool macos_provided;
 *     const struct AppMenuKeystroke *keystroke;
 * }
 * }
 */
public class ActionItem_Body {

    ActionItem_Body() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        kwm_macos_h.C_BOOL.withName("enabled"),
        MemoryLayout.paddingLayout(7),
        kwm_macos_h.C_POINTER.withName("title"),
        kwm_macos_h.C_BOOL.withName("macos_provided"),
        MemoryLayout.paddingLayout(7),
        kwm_macos_h.C_POINTER.withName("keystroke")
    ).withName("ActionItem_Body");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean enabled$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("enabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static final OfBoolean enabled$layout() {
        return enabled$LAYOUT;
    }

    private static final long enabled$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static final long enabled$offset() {
        return enabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static boolean enabled(MemorySegment struct) {
        return struct.get(enabled$LAYOUT, enabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool enabled
     * }
     */
    public static void enabled(MemorySegment struct, boolean fieldValue) {
        struct.set(enabled$LAYOUT, enabled$OFFSET, fieldValue);
    }

    private static final AddressLayout title$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("title"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StrPtr title
     * }
     */
    public static final AddressLayout title$layout() {
        return title$LAYOUT;
    }

    private static final long title$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StrPtr title
     * }
     */
    public static final long title$offset() {
        return title$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StrPtr title
     * }
     */
    public static MemorySegment title(MemorySegment struct) {
        return struct.get(title$LAYOUT, title$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StrPtr title
     * }
     */
    public static void title(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(title$LAYOUT, title$OFFSET, fieldValue);
    }

    private static final OfBoolean macos_provided$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("macos_provided"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool macos_provided
     * }
     */
    public static final OfBoolean macos_provided$layout() {
        return macos_provided$LAYOUT;
    }

    private static final long macos_provided$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool macos_provided
     * }
     */
    public static final long macos_provided$offset() {
        return macos_provided$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool macos_provided
     * }
     */
    public static boolean macos_provided(MemorySegment struct) {
        return struct.get(macos_provided$LAYOUT, macos_provided$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool macos_provided
     * }
     */
    public static void macos_provided(MemorySegment struct, boolean fieldValue) {
        struct.set(macos_provided$LAYOUT, macos_provided$OFFSET, fieldValue);
    }

    private static final AddressLayout keystroke$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("keystroke"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct AppMenuKeystroke *keystroke
     * }
     */
    public static final AddressLayout keystroke$layout() {
        return keystroke$LAYOUT;
    }

    private static final long keystroke$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct AppMenuKeystroke *keystroke
     * }
     */
    public static final long keystroke$offset() {
        return keystroke$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct AppMenuKeystroke *keystroke
     * }
     */
    public static MemorySegment keystroke(MemorySegment struct) {
        return struct.get(keystroke$LAYOUT, keystroke$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct AppMenuKeystroke *keystroke
     * }
     */
    public static void keystroke(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(keystroke$LAYOUT, keystroke$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

