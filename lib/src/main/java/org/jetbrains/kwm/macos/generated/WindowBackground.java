// Generated by jextract

package org.jetbrains.kwm.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WindowBackground {
 *     WindowBackground_Tag tag;
 *     union {
 *         struct {
 *             struct Color solid_color;
 *         };
 *         struct {
 *             enum WindowVisualEffect visual_effect;
 *         };
 *     };
 * }
 * }
 */
public class WindowBackground {

    WindowBackground() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        kwm_macos_h.C_INT.withName("tag"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Color.layout().withName("solid_color")
            ).withName("$anon$582:5"),
            MemoryLayout.structLayout(
                kwm_macos_h.C_INT.withName("visual_effect")
            ).withName("$anon$585:5")
        ).withName("$anon$581:3")
    ).withName("WindowBackground");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WindowBackground_Tag tag
     * }
     */
    public static final OfInt tag$layout() {
        return tag$LAYOUT;
    }

    private static final long tag$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WindowBackground_Tag tag
     * }
     */
    public static final long tag$offset() {
        return tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WindowBackground_Tag tag
     * }
     */
    public static int tag(MemorySegment struct) {
        return struct.get(tag$LAYOUT, tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WindowBackground_Tag tag
     * }
     */
    public static void tag(MemorySegment struct, int fieldValue) {
        struct.set(tag$LAYOUT, tag$OFFSET, fieldValue);
    }

    private static final GroupLayout solid_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$581:3"), groupElement("$anon$582:5"), groupElement("solid_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct Color solid_color
     * }
     */
    public static final GroupLayout solid_color$layout() {
        return solid_color$LAYOUT;
    }

    private static final long solid_color$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct Color solid_color
     * }
     */
    public static final long solid_color$offset() {
        return solid_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct Color solid_color
     * }
     */
    public static MemorySegment solid_color(MemorySegment struct) {
        return struct.asSlice(solid_color$OFFSET, solid_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct Color solid_color
     * }
     */
    public static void solid_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, solid_color$OFFSET, solid_color$LAYOUT.byteSize());
    }

    private static final OfInt visual_effect$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$581:3"), groupElement("$anon$585:5"), groupElement("visual_effect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum WindowVisualEffect visual_effect
     * }
     */
    public static final OfInt visual_effect$layout() {
        return visual_effect$LAYOUT;
    }

    private static final long visual_effect$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum WindowVisualEffect visual_effect
     * }
     */
    public static final long visual_effect$offset() {
        return visual_effect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum WindowVisualEffect visual_effect
     * }
     */
    public static int visual_effect(MemorySegment struct) {
        return struct.get(visual_effect$LAYOUT, visual_effect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum WindowVisualEffect visual_effect
     * }
     */
    public static void visual_effect(MemorySegment struct, int fieldValue) {
        struct.set(visual_effect$LAYOUT, visual_effect$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

