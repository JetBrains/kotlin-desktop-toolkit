// Generated by jextract

package org.jetbrains.kwm.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct LoggerConfiguration {
 *     StrPtr file_path;
 *     enum LogLevel console_level;
 *     enum LogLevel file_level;
 * }
 * }
 */
public class LoggerConfiguration {

    LoggerConfiguration() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        kwm_macos_h.C_POINTER.withName("file_path"),
        kwm_macos_h.C_INT.withName("console_level"),
        kwm_macos_h.C_INT.withName("file_level")
    ).withName("LoggerConfiguration");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout file_path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("file_path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StrPtr file_path
     * }
     */
    public static final AddressLayout file_path$layout() {
        return file_path$LAYOUT;
    }

    private static final long file_path$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StrPtr file_path
     * }
     */
    public static final long file_path$offset() {
        return file_path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StrPtr file_path
     * }
     */
    public static MemorySegment file_path(MemorySegment struct) {
        return struct.get(file_path$LAYOUT, file_path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StrPtr file_path
     * }
     */
    public static void file_path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(file_path$LAYOUT, file_path$OFFSET, fieldValue);
    }

    private static final OfInt console_level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("console_level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum LogLevel console_level
     * }
     */
    public static final OfInt console_level$layout() {
        return console_level$LAYOUT;
    }

    private static final long console_level$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum LogLevel console_level
     * }
     */
    public static final long console_level$offset() {
        return console_level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum LogLevel console_level
     * }
     */
    public static int console_level(MemorySegment struct) {
        return struct.get(console_level$LAYOUT, console_level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum LogLevel console_level
     * }
     */
    public static void console_level(MemorySegment struct, int fieldValue) {
        struct.set(console_level$LAYOUT, console_level$OFFSET, fieldValue);
    }

    private static final OfInt file_level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("file_level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum LogLevel file_level
     * }
     */
    public static final OfInt file_level$layout() {
        return file_level$LAYOUT;
    }

    private static final long file_level$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum LogLevel file_level
     * }
     */
    public static final long file_level$offset() {
        return file_level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum LogLevel file_level
     * }
     */
    public static int file_level(MemorySegment struct) {
        return struct.get(file_level$LAYOUT, file_level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum LogLevel file_level
     * }
     */
    public static void file_level(MemorySegment struct, int fieldValue) {
        struct.set(file_level$LAYOUT, file_level$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

