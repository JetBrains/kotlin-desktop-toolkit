// Generated by jextract

package org.jetbrains.kwm.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class kwm_macos_h {

    kwm_macos_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("kwm_macos"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef void *MetalDeviceRef
     * }
     */
    public static final AddressLayout MetalDeviceRef = kwm_macos_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *MetalCommandQueueRef
     * }
     */
    public static final AddressLayout MetalCommandQueueRef = kwm_macos_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *MetalTextureRef
     * }
     */
    public static final AddressLayout MetalTextureRef = kwm_macos_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *WindowRef
     * }
     */
    public static final AddressLayout WindowRef = kwm_macos_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const char *StrPtr
     * }
     */
    public static final AddressLayout StrPtr = kwm_macos_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef uint32_t AppMenuKeyModifiers
     * }
     */
    public static final OfInt AppMenuKeyModifiers = kwm_macos_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t ArraySize
     * }
     */
    public static final OfLong ArraySize = kwm_macos_h.C_LONG_LONG;
    private static final int ActionItem = (int)0L;
    /**
     * {@snippet lang=c :
     * enum AppMenuItem_Tag.ActionItem = 0
     * }
     */
    public static int ActionItem() {
        return ActionItem;
    }
    private static final int SeparatorItem = (int)1L;
    /**
     * {@snippet lang=c :
     * enum AppMenuItem_Tag.SeparatorItem = 1
     * }
     */
    public static int SeparatorItem() {
        return SeparatorItem;
    }
    private static final int SubMenuItem = (int)2L;
    /**
     * {@snippet lang=c :
     * enum AppMenuItem_Tag.SubMenuItem = 2
     * }
     */
    public static int SubMenuItem() {
        return SubMenuItem;
    }

    private static class dispatcher_is_main_thread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            kwm_macos_h.C_BOOL    );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("dispatcher_is_main_thread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static FunctionDescriptor dispatcher_is_main_thread$descriptor() {
        return dispatcher_is_main_thread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static MethodHandle dispatcher_is_main_thread$handle() {
        return dispatcher_is_main_thread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static MemorySegment dispatcher_is_main_thread$address() {
        return dispatcher_is_main_thread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static boolean dispatcher_is_main_thread() {
        var mh$ = dispatcher_is_main_thread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dispatcher_is_main_thread");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class dispatcher_main_exec_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("dispatcher_main_exec_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static FunctionDescriptor dispatcher_main_exec_async$descriptor() {
        return dispatcher_main_exec_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static MethodHandle dispatcher_main_exec_async$handle() {
        return dispatcher_main_exec_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static MemorySegment dispatcher_main_exec_async$address() {
        return dispatcher_main_exec_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static void dispatcher_main_exec_async(MemorySegment f) {
        var mh$ = dispatcher_main_exec_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dispatcher_main_exec_async", f);
            }
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER,
            ApplicationCallbacks.layout()
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("application_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_init(const struct ApplicationConfig *config, struct ApplicationCallbacks callbacks)
     * }
     */
    public static FunctionDescriptor application_init$descriptor() {
        return application_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_init(const struct ApplicationConfig *config, struct ApplicationCallbacks callbacks)
     * }
     */
    public static MethodHandle application_init$handle() {
        return application_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_init(const struct ApplicationConfig *config, struct ApplicationCallbacks callbacks)
     * }
     */
    public static MemorySegment application_init$address() {
        return application_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_init(const struct ApplicationConfig *config, struct ApplicationCallbacks callbacks)
     * }
     */
    public static void application_init(MemorySegment config, MemorySegment callbacks) {
        var mh$ = application_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_init", config, callbacks);
            }
            mh$.invokeExact(config, callbacks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_run_event_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("application_run_event_loop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static FunctionDescriptor application_run_event_loop$descriptor() {
        return application_run_event_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static MethodHandle application_run_event_loop$handle() {
        return application_run_event_loop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static MemorySegment application_run_event_loop$address() {
        return application_run_event_loop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static void application_run_event_loop() {
        var mh$ = application_run_event_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_run_event_loop");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_request_termination {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("application_request_termination");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_request_termination()
     * }
     */
    public static FunctionDescriptor application_request_termination$descriptor() {
        return application_request_termination.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_request_termination()
     * }
     */
    public static MethodHandle application_request_termination$handle() {
        return application_request_termination.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_request_termination()
     * }
     */
    public static MemorySegment application_request_termination$address() {
        return application_request_termination.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_request_termination()
     * }
     */
    public static void application_request_termination() {
        var mh$ = application_request_termination.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_request_termination");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_create_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            kwm_macos_h.C_POINTER    );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_create_device");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MetalDeviceRef metal_create_device()
     * }
     */
    public static FunctionDescriptor metal_create_device$descriptor() {
        return metal_create_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MetalDeviceRef metal_create_device()
     * }
     */
    public static MethodHandle metal_create_device$handle() {
        return metal_create_device.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MetalDeviceRef metal_create_device()
     * }
     */
    public static MemorySegment metal_create_device$address() {
        return metal_create_device.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MetalDeviceRef metal_create_device()
     * }
     */
    public static MemorySegment metal_create_device() {
        var mh$ = metal_create_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_create_device");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_deref_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_deref_device");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_deref_device(MetalDeviceRef device)
     * }
     */
    public static FunctionDescriptor metal_deref_device$descriptor() {
        return metal_deref_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_deref_device(MetalDeviceRef device)
     * }
     */
    public static MethodHandle metal_deref_device$handle() {
        return metal_deref_device.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_deref_device(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_deref_device$address() {
        return metal_deref_device.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_deref_device(MetalDeviceRef device)
     * }
     */
    public static void metal_deref_device(MemorySegment device) {
        var mh$ = metal_deref_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_deref_device", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_create_command_queue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            kwm_macos_h.C_POINTER,
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_create_command_queue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MetalCommandQueueRef metal_create_command_queue(MetalDeviceRef device)
     * }
     */
    public static FunctionDescriptor metal_create_command_queue$descriptor() {
        return metal_create_command_queue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MetalCommandQueueRef metal_create_command_queue(MetalDeviceRef device)
     * }
     */
    public static MethodHandle metal_create_command_queue$handle() {
        return metal_create_command_queue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MetalCommandQueueRef metal_create_command_queue(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_create_command_queue$address() {
        return metal_create_command_queue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MetalCommandQueueRef metal_create_command_queue(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_create_command_queue(MemorySegment device) {
        var mh$ = metal_create_command_queue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_create_command_queue", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_command_queue_commit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_command_queue_commit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_command_queue_commit(MetalCommandQueueRef queue)
     * }
     */
    public static FunctionDescriptor metal_command_queue_commit$descriptor() {
        return metal_command_queue_commit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_command_queue_commit(MetalCommandQueueRef queue)
     * }
     */
    public static MethodHandle metal_command_queue_commit$handle() {
        return metal_command_queue_commit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_command_queue_commit(MetalCommandQueueRef queue)
     * }
     */
    public static MemorySegment metal_command_queue_commit$address() {
        return metal_command_queue_commit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_command_queue_commit(MetalCommandQueueRef queue)
     * }
     */
    public static void metal_command_queue_commit(MemorySegment queue) {
        var mh$ = metal_command_queue_commit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_command_queue_commit", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_deref_command_queue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_deref_command_queue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_deref_command_queue(MetalCommandQueueRef queue)
     * }
     */
    public static FunctionDescriptor metal_deref_command_queue$descriptor() {
        return metal_deref_command_queue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_deref_command_queue(MetalCommandQueueRef queue)
     * }
     */
    public static MethodHandle metal_deref_command_queue$handle() {
        return metal_deref_command_queue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_deref_command_queue(MetalCommandQueueRef queue)
     * }
     */
    public static MemorySegment metal_deref_command_queue$address() {
        return metal_deref_command_queue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_deref_command_queue(MetalCommandQueueRef queue)
     * }
     */
    public static void metal_deref_command_queue(MemorySegment queue) {
        var mh$ = metal_deref_command_queue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_deref_command_queue", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_create_view {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            kwm_macos_h.C_POINTER,
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_create_view");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct MetalView *metal_create_view(MetalDeviceRef device)
     * }
     */
    public static FunctionDescriptor metal_create_view$descriptor() {
        return metal_create_view.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct MetalView *metal_create_view(MetalDeviceRef device)
     * }
     */
    public static MethodHandle metal_create_view$handle() {
        return metal_create_view.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct MetalView *metal_create_view(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_create_view$address() {
        return metal_create_view.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct MetalView *metal_create_view(MetalDeviceRef device)
     * }
     */
    public static MemorySegment metal_create_view(MemorySegment device) {
        var mh$ = metal_create_view.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_create_view", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_drop_view {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_drop_view");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_drop_view(struct MetalView *view)
     * }
     */
    public static FunctionDescriptor metal_drop_view$descriptor() {
        return metal_drop_view.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_drop_view(struct MetalView *view)
     * }
     */
    public static MethodHandle metal_drop_view$handle() {
        return metal_drop_view.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_drop_view(struct MetalView *view)
     * }
     */
    public static MemorySegment metal_drop_view$address() {
        return metal_drop_view.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_drop_view(struct MetalView *view)
     * }
     */
    public static void metal_drop_view(MemorySegment view) {
        var mh$ = metal_drop_view.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_drop_view", view);
            }
            mh$.invokeExact(view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_view_present {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_view_present");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_view_present(const struct MetalView *view)
     * }
     */
    public static FunctionDescriptor metal_view_present$descriptor() {
        return metal_view_present.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_view_present(const struct MetalView *view)
     * }
     */
    public static MethodHandle metal_view_present$handle() {
        return metal_view_present.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_view_present(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_present$address() {
        return metal_view_present.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_view_present(const struct MetalView *view)
     * }
     */
    public static void metal_view_present(MemorySegment view) {
        var mh$ = metal_view_present.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_view_present", view);
            }
            mh$.invokeExact(view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_view_get_texture_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Size.layout(),
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_view_get_texture_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct Size metal_view_get_texture_size(const struct MetalView *view)
     * }
     */
    public static FunctionDescriptor metal_view_get_texture_size$descriptor() {
        return metal_view_get_texture_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct Size metal_view_get_texture_size(const struct MetalView *view)
     * }
     */
    public static MethodHandle metal_view_get_texture_size$handle() {
        return metal_view_get_texture_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct Size metal_view_get_texture_size(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_get_texture_size$address() {
        return metal_view_get_texture_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct Size metal_view_get_texture_size(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_get_texture_size(SegmentAllocator allocator, MemorySegment view) {
        var mh$ = metal_view_get_texture_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_view_get_texture_size", allocator, view);
            }
            return (MemorySegment)mh$.invokeExact(allocator, view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_view_next_texture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            kwm_macos_h.C_POINTER,
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_view_next_texture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MetalTextureRef metal_view_next_texture(const struct MetalView *view)
     * }
     */
    public static FunctionDescriptor metal_view_next_texture$descriptor() {
        return metal_view_next_texture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MetalTextureRef metal_view_next_texture(const struct MetalView *view)
     * }
     */
    public static MethodHandle metal_view_next_texture$handle() {
        return metal_view_next_texture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MetalTextureRef metal_view_next_texture(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_next_texture$address() {
        return metal_view_next_texture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MetalTextureRef metal_view_next_texture(const struct MetalView *view)
     * }
     */
    public static MemorySegment metal_view_next_texture(MemorySegment view) {
        var mh$ = metal_view_next_texture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_view_next_texture", view);
            }
            return (MemorySegment)mh$.invokeExact(view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_deref_texture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_deref_texture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_deref_texture(MetalTextureRef texture)
     * }
     */
    public static FunctionDescriptor metal_deref_texture$descriptor() {
        return metal_deref_texture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_deref_texture(MetalTextureRef texture)
     * }
     */
    public static MethodHandle metal_deref_texture$handle() {
        return metal_deref_texture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_deref_texture(MetalTextureRef texture)
     * }
     */
    public static MemorySegment metal_deref_texture$address() {
        return metal_deref_texture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_deref_texture(MetalTextureRef texture)
     * }
     */
    public static void metal_deref_texture(MemorySegment texture) {
        var mh$ = metal_deref_texture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_deref_texture", texture);
            }
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class metal_view_attach_to_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER,
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("metal_view_attach_to_window");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void metal_view_attach_to_window(const struct MetalView *view, WindowRef window)
     * }
     */
    public static FunctionDescriptor metal_view_attach_to_window$descriptor() {
        return metal_view_attach_to_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void metal_view_attach_to_window(const struct MetalView *view, WindowRef window)
     * }
     */
    public static MethodHandle metal_view_attach_to_window$handle() {
        return metal_view_attach_to_window.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void metal_view_attach_to_window(const struct MetalView *view, WindowRef window)
     * }
     */
    public static MemorySegment metal_view_attach_to_window$address() {
        return metal_view_attach_to_window.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void metal_view_attach_to_window(const struct MetalView *view, WindowRef window)
     * }
     */
    public static void metal_view_attach_to_window(MemorySegment view, MemorySegment window) {
        var mh$ = metal_view_attach_to_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("metal_view_attach_to_window", view, window);
            }
            mh$.invokeExact(view, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class display_link_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            kwm_macos_h.C_POINTER,
            kwm_macos_h.C_POINTER,
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("display_link_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct DisplayLink *display_link_create(WindowRef window, DisplayLinkCallback on_next_frame)
     * }
     */
    public static FunctionDescriptor display_link_create$descriptor() {
        return display_link_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct DisplayLink *display_link_create(WindowRef window, DisplayLinkCallback on_next_frame)
     * }
     */
    public static MethodHandle display_link_create$handle() {
        return display_link_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct DisplayLink *display_link_create(WindowRef window, DisplayLinkCallback on_next_frame)
     * }
     */
    public static MemorySegment display_link_create$address() {
        return display_link_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct DisplayLink *display_link_create(WindowRef window, DisplayLinkCallback on_next_frame)
     * }
     */
    public static MemorySegment display_link_create(MemorySegment window, MemorySegment on_next_frame) {
        var mh$ = display_link_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("display_link_create", window, on_next_frame);
            }
            return (MemorySegment)mh$.invokeExact(window, on_next_frame);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class display_link_set_paused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER,
            kwm_macos_h.C_BOOL
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("display_link_set_paused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void display_link_set_paused(const struct DisplayLink *display_link, bool value)
     * }
     */
    public static FunctionDescriptor display_link_set_paused$descriptor() {
        return display_link_set_paused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void display_link_set_paused(const struct DisplayLink *display_link, bool value)
     * }
     */
    public static MethodHandle display_link_set_paused$handle() {
        return display_link_set_paused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void display_link_set_paused(const struct DisplayLink *display_link, bool value)
     * }
     */
    public static MemorySegment display_link_set_paused$address() {
        return display_link_set_paused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void display_link_set_paused(const struct DisplayLink *display_link, bool value)
     * }
     */
    public static void display_link_set_paused(MemorySegment display_link, boolean value) {
        var mh$ = display_link_set_paused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("display_link_set_paused", display_link, value);
            }
            mh$.invokeExact(display_link, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class display_link_drop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("display_link_drop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void display_link_drop(struct DisplayLink *display_link)
     * }
     */
    public static FunctionDescriptor display_link_drop$descriptor() {
        return display_link_drop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void display_link_drop(struct DisplayLink *display_link)
     * }
     */
    public static MethodHandle display_link_drop$handle() {
        return display_link_drop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void display_link_drop(struct DisplayLink *display_link)
     * }
     */
    public static MemorySegment display_link_drop$address() {
        return display_link_drop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void display_link_drop(struct DisplayLink *display_link)
     * }
     */
    public static void display_link_drop(MemorySegment display_link) {
        var mh$ = display_link_drop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("display_link_drop", display_link);
            }
            mh$.invokeExact(display_link);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            kwm_macos_h.C_POINTER,
            kwm_macos_h.C_POINTER,
            kwm_macos_h.C_FLOAT,
            kwm_macos_h.C_FLOAT,
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("window_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WindowRef window_create(StrPtr title, float x, float y, WindowResizeCallback on_resize)
     * }
     */
    public static FunctionDescriptor window_create$descriptor() {
        return window_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WindowRef window_create(StrPtr title, float x, float y, WindowResizeCallback on_resize)
     * }
     */
    public static MethodHandle window_create$handle() {
        return window_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WindowRef window_create(StrPtr title, float x, float y, WindowResizeCallback on_resize)
     * }
     */
    public static MemorySegment window_create$address() {
        return window_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WindowRef window_create(StrPtr title, float x, float y, WindowResizeCallback on_resize)
     * }
     */
    public static MemorySegment window_create(MemorySegment title, float x, float y, MemorySegment on_resize) {
        var mh$ = window_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_create", title, x, y, on_resize);
            }
            return (MemorySegment)mh$.invokeExact(title, x, y, on_resize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class window_deref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("window_deref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void window_deref(WindowRef window)
     * }
     */
    public static FunctionDescriptor window_deref$descriptor() {
        return window_deref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void window_deref(WindowRef window)
     * }
     */
    public static MethodHandle window_deref$handle() {
        return window_deref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void window_deref(WindowRef window)
     * }
     */
    public static MemorySegment window_deref$address() {
        return window_deref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void window_deref(WindowRef window)
     * }
     */
    public static void window_deref(MemorySegment window) {
        var mh$ = window_deref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("window_deref", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class main_menu_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            AppMenuStructure.layout()
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("main_menu_update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static FunctionDescriptor main_menu_update$descriptor() {
        return main_menu_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static MethodHandle main_menu_update$handle() {
        return main_menu_update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static MemorySegment main_menu_update$address() {
        return main_menu_update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static void main_menu_update(MemorySegment menu) {
        var mh$ = main_menu_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("main_menu_update", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class main_menu_set_none {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("main_menu_set_none");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void main_menu_set_none()
     * }
     */
    public static FunctionDescriptor main_menu_set_none$descriptor() {
        return main_menu_set_none.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void main_menu_set_none()
     * }
     */
    public static MethodHandle main_menu_set_none$handle() {
        return main_menu_set_none.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void main_menu_set_none()
     * }
     */
    public static MemorySegment main_menu_set_none$address() {
        return main_menu_set_none.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void main_menu_set_none()
     * }
     */
    public static void main_menu_set_none() {
        var mh$ = main_menu_set_none.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("main_menu_set_none");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int AppMenuKeyModifiers_ModifierFlagCapsLock = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define AppMenuKeyModifiers_ModifierFlagCapsLock 65536
     * }
     */
    public static int AppMenuKeyModifiers_ModifierFlagCapsLock() {
        return AppMenuKeyModifiers_ModifierFlagCapsLock;
    }
    private static final int AppMenuKeyModifiers_ModifierFlagShift = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define AppMenuKeyModifiers_ModifierFlagShift 131072
     * }
     */
    public static int AppMenuKeyModifiers_ModifierFlagShift() {
        return AppMenuKeyModifiers_ModifierFlagShift;
    }
    private static final int AppMenuKeyModifiers_ModifierFlagControl = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define AppMenuKeyModifiers_ModifierFlagControl 262144
     * }
     */
    public static int AppMenuKeyModifiers_ModifierFlagControl() {
        return AppMenuKeyModifiers_ModifierFlagControl;
    }
    private static final int AppMenuKeyModifiers_ModifierFlagOption = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define AppMenuKeyModifiers_ModifierFlagOption 524288
     * }
     */
    public static int AppMenuKeyModifiers_ModifierFlagOption() {
        return AppMenuKeyModifiers_ModifierFlagOption;
    }
    private static final int AppMenuKeyModifiers_ModifierFlagCommand = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define AppMenuKeyModifiers_ModifierFlagCommand 1048576
     * }
     */
    public static int AppMenuKeyModifiers_ModifierFlagCommand() {
        return AppMenuKeyModifiers_ModifierFlagCommand;
    }
    private static final int AppMenuKeyModifiers_ModifierFlagNumericPad = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define AppMenuKeyModifiers_ModifierFlagNumericPad 2097152
     * }
     */
    public static int AppMenuKeyModifiers_ModifierFlagNumericPad() {
        return AppMenuKeyModifiers_ModifierFlagNumericPad;
    }
    private static final int AppMenuKeyModifiers_ModifierFlagHelp = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define AppMenuKeyModifiers_ModifierFlagHelp 4194304
     * }
     */
    public static int AppMenuKeyModifiers_ModifierFlagHelp() {
        return AppMenuKeyModifiers_ModifierFlagHelp;
    }
    private static final int AppMenuKeyModifiers_ModifierFlagFunction = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define AppMenuKeyModifiers_ModifierFlagFunction 8388608
     * }
     */
    public static int AppMenuKeyModifiers_ModifierFlagFunction() {
        return AppMenuKeyModifiers_ModifierFlagFunction;
    }
    private static final int AppMenuKeyModifiers_ModifierFlagDeviceIndependentFlagsMask = (int)4294901760L;
    /**
     * {@snippet lang=c :
     * #define AppMenuKeyModifiers_ModifierFlagDeviceIndependentFlagsMask 4294901760
     * }
     */
    public static int AppMenuKeyModifiers_ModifierFlagDeviceIndependentFlagsMask() {
        return AppMenuKeyModifiers_ModifierFlagDeviceIndependentFlagsMask;
    }
}

