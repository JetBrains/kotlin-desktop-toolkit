// Generated by jextract

package org.jetbrains.kwm.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class kwm_macos_h {

    kwm_macos_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("kwm_macos"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef const char *StrPtr
     * }
     */
    public static final AddressLayout StrPtr = kwm_macos_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int64_t ArraySize
     * }
     */
    public static final OfLong ArraySize = kwm_macos_h.C_LONG_LONG;
    private static final int ActionItem = (int)0L;
    /**
     * {@snippet lang=c :
     * enum AppMenuItem_Tag.ActionItem = 0
     * }
     */
    public static int ActionItem() {
        return ActionItem;
    }
    private static final int SeparatorItem = (int)1L;
    /**
     * {@snippet lang=c :
     * enum AppMenuItem_Tag.SeparatorItem = 1
     * }
     */
    public static int SeparatorItem() {
        return SeparatorItem;
    }
    private static final int SubMenuItem = (int)2L;
    /**
     * {@snippet lang=c :
     * enum AppMenuItem_Tag.SubMenuItem = 2
     * }
     */
    public static int SubMenuItem() {
        return SubMenuItem;
    }

    private static class dispatcher_is_main_thread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            kwm_macos_h.C_BOOL    );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("dispatcher_is_main_thread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static FunctionDescriptor dispatcher_is_main_thread$descriptor() {
        return dispatcher_is_main_thread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static MethodHandle dispatcher_is_main_thread$handle() {
        return dispatcher_is_main_thread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static MemorySegment dispatcher_is_main_thread$address() {
        return dispatcher_is_main_thread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool dispatcher_is_main_thread()
     * }
     */
    public static boolean dispatcher_is_main_thread() {
        var mh$ = dispatcher_is_main_thread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dispatcher_is_main_thread");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class dispatcher_main_exec_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            kwm_macos_h.C_POINTER
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("dispatcher_main_exec_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static FunctionDescriptor dispatcher_main_exec_async$descriptor() {
        return dispatcher_main_exec_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static MethodHandle dispatcher_main_exec_async$handle() {
        return dispatcher_main_exec_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static MemorySegment dispatcher_main_exec_async$address() {
        return dispatcher_main_exec_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void dispatcher_main_exec_async(void (*f)(void))
     * }
     */
    public static void dispatcher_main_exec_async(MemorySegment f) {
        var mh$ = dispatcher_main_exec_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dispatcher_main_exec_async", f);
            }
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class add_numbers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            kwm_macos_h.C_INT,
            kwm_macos_h.C_INT,
            kwm_macos_h.C_INT
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("add_numbers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32_t add_numbers(int32_t x, int32_t y)
     * }
     */
    public static FunctionDescriptor add_numbers$descriptor() {
        return add_numbers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32_t add_numbers(int32_t x, int32_t y)
     * }
     */
    public static MethodHandle add_numbers$handle() {
        return add_numbers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int32_t add_numbers(int32_t x, int32_t y)
     * }
     */
    public static MemorySegment add_numbers$address() {
        return add_numbers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int32_t add_numbers(int32_t x, int32_t y)
     * }
     */
    public static int add_numbers(int x, int y) {
        var mh$ = add_numbers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("add_numbers", x, y);
            }
            return (int)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("application_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_init()
     * }
     */
    public static FunctionDescriptor application_init$descriptor() {
        return application_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_init()
     * }
     */
    public static MethodHandle application_init$handle() {
        return application_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_init()
     * }
     */
    public static MemorySegment application_init$address() {
        return application_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_init()
     * }
     */
    public static void application_init() {
        var mh$ = application_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_init");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class application_run_event_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("application_run_event_loop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static FunctionDescriptor application_run_event_loop$descriptor() {
        return application_run_event_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static MethodHandle application_run_event_loop$handle() {
        return application_run_event_loop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static MemorySegment application_run_event_loop$address() {
        return application_run_event_loop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void application_run_event_loop()
     * }
     */
    public static void application_run_event_loop() {
        var mh$ = application_run_event_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("application_run_event_loop");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class main_menu_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            AppMenuStructure.layout()
        );

        public static final MemorySegment ADDR = kwm_macos_h.findOrThrow("main_menu_update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static FunctionDescriptor main_menu_update$descriptor() {
        return main_menu_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static MethodHandle main_menu_update$handle() {
        return main_menu_update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static MemorySegment main_menu_update$address() {
        return main_menu_update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void main_menu_update(struct AppMenuStructure menu)
     * }
     */
    public static void main_menu_update(MemorySegment menu) {
        var mh$ = main_menu_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("main_menu_update", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

