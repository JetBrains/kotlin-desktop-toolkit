// Generated by jextract

package org.jetbrains.kwm.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ScreenInfo {
 *     ScreenId screen_id;
 *     bool is_main;
 *     StrPtr name;
 *     struct LogicalPoint origin;
 *     struct LogicalSize size;
 *     double scale;
 * }
 * }
 */
public class ScreenInfo {

    ScreenInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        kwm_macos_h.C_INT.withName("screen_id"),
        kwm_macos_h.C_BOOL.withName("is_main"),
        MemoryLayout.paddingLayout(3),
        kwm_macos_h.C_POINTER.withName("name"),
        LogicalPoint.layout().withName("origin"),
        LogicalSize.layout().withName("size"),
        kwm_macos_h.C_DOUBLE.withName("scale")
    ).withName("ScreenInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt screen_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("screen_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ScreenId screen_id
     * }
     */
    public static final OfInt screen_id$layout() {
        return screen_id$LAYOUT;
    }

    private static final long screen_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ScreenId screen_id
     * }
     */
    public static final long screen_id$offset() {
        return screen_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ScreenId screen_id
     * }
     */
    public static int screen_id(MemorySegment struct) {
        return struct.get(screen_id$LAYOUT, screen_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ScreenId screen_id
     * }
     */
    public static void screen_id(MemorySegment struct, int fieldValue) {
        struct.set(screen_id$LAYOUT, screen_id$OFFSET, fieldValue);
    }

    private static final OfBoolean is_main$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_main"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_main
     * }
     */
    public static final OfBoolean is_main$layout() {
        return is_main$LAYOUT;
    }

    private static final long is_main$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_main
     * }
     */
    public static final long is_main$offset() {
        return is_main$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_main
     * }
     */
    public static boolean is_main(MemorySegment struct) {
        return struct.get(is_main$LAYOUT, is_main$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_main
     * }
     */
    public static void is_main(MemorySegment struct, boolean fieldValue) {
        struct.set(is_main$LAYOUT, is_main$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StrPtr name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StrPtr name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StrPtr name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StrPtr name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final GroupLayout origin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("origin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct LogicalPoint origin
     * }
     */
    public static final GroupLayout origin$layout() {
        return origin$LAYOUT;
    }

    private static final long origin$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct LogicalPoint origin
     * }
     */
    public static final long origin$offset() {
        return origin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct LogicalPoint origin
     * }
     */
    public static MemorySegment origin(MemorySegment struct) {
        return struct.asSlice(origin$OFFSET, origin$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct LogicalPoint origin
     * }
     */
    public static void origin(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, origin$OFFSET, origin$LAYOUT.byteSize());
    }

    private static final GroupLayout size$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct LogicalSize size
     * }
     */
    public static final GroupLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct LogicalSize size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct LogicalSize size
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.asSlice(size$OFFSET, size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct LogicalSize size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, size$OFFSET, size$LAYOUT.byteSize());
    }

    private static final OfDouble scale$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double scale
     * }
     */
    public static final OfDouble scale$layout() {
        return scale$LAYOUT;
    }

    private static final long scale$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double scale
     * }
     */
    public static final long scale$offset() {
        return scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double scale
     * }
     */
    public static double scale(MemorySegment struct) {
        return struct.get(scale$LAYOUT, scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double scale
     * }
     */
    public static void scale(MemorySegment struct, double fieldValue) {
        struct.set(scale$LAYOUT, scale$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

