// Generated by jextract

package org.jetbrains.kwm.macos.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Event {
 *     Event_Tag tag;
 *     union {
 *         struct {
 *             struct MouseMovedEvent mouse_moved;
 *         };
 *         struct {
 *             struct MouseDownEvent mouse_down;
 *         };
 *         struct {
 *             struct MouseUpEvent mouse_up;
 *         };
 *         struct {
 *             struct ScrollWheelEvent scroll_wheel;
 *         };
 *         struct {
 *             struct WindowScreenChangeEvent window_screen_change;
 *         };
 *         struct {
 *             struct WindowResizeEvent window_resize;
 *         };
 *         struct {
 *             struct WindowMoveEvent window_move;
 *         };
 *         struct {
 *             struct WindowFocusChangeEvent window_focus_change;
 *         };
 *         struct {
 *             struct WindowCloseRequestEvent window_close_request;
 *         };
 *         struct {
 *             struct WindowFullScreenToggleEvent window_full_screen_toggle;
 *         };
 *     };
 * }
 * }
 */
public class Event {

    Event() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        kwm_macos_h.C_INT.withName("tag"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MouseMovedEvent.layout().withName("mouse_moved")
            ).withName("$anon$123:5"),
            MemoryLayout.structLayout(
                MouseDownEvent.layout().withName("mouse_down")
            ).withName("$anon$126:5"),
            MemoryLayout.structLayout(
                MouseUpEvent.layout().withName("mouse_up")
            ).withName("$anon$129:5"),
            MemoryLayout.structLayout(
                ScrollWheelEvent.layout().withName("scroll_wheel")
            ).withName("$anon$132:5"),
            MemoryLayout.structLayout(
                WindowScreenChangeEvent.layout().withName("window_screen_change")
            ).withName("$anon$135:5"),
            MemoryLayout.structLayout(
                WindowResizeEvent.layout().withName("window_resize")
            ).withName("$anon$138:5"),
            MemoryLayout.structLayout(
                WindowMoveEvent.layout().withName("window_move")
            ).withName("$anon$141:5"),
            MemoryLayout.structLayout(
                WindowFocusChangeEvent.layout().withName("window_focus_change")
            ).withName("$anon$144:5"),
            MemoryLayout.structLayout(
                WindowCloseRequestEvent.layout().withName("window_close_request")
            ).withName("$anon$147:5"),
            MemoryLayout.structLayout(
                WindowFullScreenToggleEvent.layout().withName("window_full_screen_toggle")
            ).withName("$anon$150:5")
        ).withName("$anon$122:3")
    ).withName("Event");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Event_Tag tag
     * }
     */
    public static final OfInt tag$layout() {
        return tag$LAYOUT;
    }

    private static final long tag$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Event_Tag tag
     * }
     */
    public static final long tag$offset() {
        return tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Event_Tag tag
     * }
     */
    public static int tag(MemorySegment struct) {
        return struct.get(tag$LAYOUT, tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Event_Tag tag
     * }
     */
    public static void tag(MemorySegment struct, int fieldValue) {
        struct.set(tag$LAYOUT, tag$OFFSET, fieldValue);
    }

    private static final GroupLayout mouse_moved$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$123:5"), groupElement("mouse_moved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct MouseMovedEvent mouse_moved
     * }
     */
    public static final GroupLayout mouse_moved$layout() {
        return mouse_moved$LAYOUT;
    }

    private static final long mouse_moved$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct MouseMovedEvent mouse_moved
     * }
     */
    public static final long mouse_moved$offset() {
        return mouse_moved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct MouseMovedEvent mouse_moved
     * }
     */
    public static MemorySegment mouse_moved(MemorySegment struct) {
        return struct.asSlice(mouse_moved$OFFSET, mouse_moved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct MouseMovedEvent mouse_moved
     * }
     */
    public static void mouse_moved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mouse_moved$OFFSET, mouse_moved$LAYOUT.byteSize());
    }

    private static final GroupLayout mouse_down$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$126:5"), groupElement("mouse_down"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct MouseDownEvent mouse_down
     * }
     */
    public static final GroupLayout mouse_down$layout() {
        return mouse_down$LAYOUT;
    }

    private static final long mouse_down$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct MouseDownEvent mouse_down
     * }
     */
    public static final long mouse_down$offset() {
        return mouse_down$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct MouseDownEvent mouse_down
     * }
     */
    public static MemorySegment mouse_down(MemorySegment struct) {
        return struct.asSlice(mouse_down$OFFSET, mouse_down$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct MouseDownEvent mouse_down
     * }
     */
    public static void mouse_down(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mouse_down$OFFSET, mouse_down$LAYOUT.byteSize());
    }

    private static final GroupLayout mouse_up$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$129:5"), groupElement("mouse_up"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct MouseUpEvent mouse_up
     * }
     */
    public static final GroupLayout mouse_up$layout() {
        return mouse_up$LAYOUT;
    }

    private static final long mouse_up$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct MouseUpEvent mouse_up
     * }
     */
    public static final long mouse_up$offset() {
        return mouse_up$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct MouseUpEvent mouse_up
     * }
     */
    public static MemorySegment mouse_up(MemorySegment struct) {
        return struct.asSlice(mouse_up$OFFSET, mouse_up$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct MouseUpEvent mouse_up
     * }
     */
    public static void mouse_up(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mouse_up$OFFSET, mouse_up$LAYOUT.byteSize());
    }

    private static final GroupLayout scroll_wheel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$132:5"), groupElement("scroll_wheel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ScrollWheelEvent scroll_wheel
     * }
     */
    public static final GroupLayout scroll_wheel$layout() {
        return scroll_wheel$LAYOUT;
    }

    private static final long scroll_wheel$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ScrollWheelEvent scroll_wheel
     * }
     */
    public static final long scroll_wheel$offset() {
        return scroll_wheel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ScrollWheelEvent scroll_wheel
     * }
     */
    public static MemorySegment scroll_wheel(MemorySegment struct) {
        return struct.asSlice(scroll_wheel$OFFSET, scroll_wheel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ScrollWheelEvent scroll_wheel
     * }
     */
    public static void scroll_wheel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scroll_wheel$OFFSET, scroll_wheel$LAYOUT.byteSize());
    }

    private static final GroupLayout window_screen_change$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$135:5"), groupElement("window_screen_change"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct WindowScreenChangeEvent window_screen_change
     * }
     */
    public static final GroupLayout window_screen_change$layout() {
        return window_screen_change$LAYOUT;
    }

    private static final long window_screen_change$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct WindowScreenChangeEvent window_screen_change
     * }
     */
    public static final long window_screen_change$offset() {
        return window_screen_change$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct WindowScreenChangeEvent window_screen_change
     * }
     */
    public static MemorySegment window_screen_change(MemorySegment struct) {
        return struct.asSlice(window_screen_change$OFFSET, window_screen_change$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct WindowScreenChangeEvent window_screen_change
     * }
     */
    public static void window_screen_change(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, window_screen_change$OFFSET, window_screen_change$LAYOUT.byteSize());
    }

    private static final GroupLayout window_resize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$138:5"), groupElement("window_resize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct WindowResizeEvent window_resize
     * }
     */
    public static final GroupLayout window_resize$layout() {
        return window_resize$LAYOUT;
    }

    private static final long window_resize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct WindowResizeEvent window_resize
     * }
     */
    public static final long window_resize$offset() {
        return window_resize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct WindowResizeEvent window_resize
     * }
     */
    public static MemorySegment window_resize(MemorySegment struct) {
        return struct.asSlice(window_resize$OFFSET, window_resize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct WindowResizeEvent window_resize
     * }
     */
    public static void window_resize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, window_resize$OFFSET, window_resize$LAYOUT.byteSize());
    }

    private static final GroupLayout window_move$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$141:5"), groupElement("window_move"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct WindowMoveEvent window_move
     * }
     */
    public static final GroupLayout window_move$layout() {
        return window_move$LAYOUT;
    }

    private static final long window_move$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct WindowMoveEvent window_move
     * }
     */
    public static final long window_move$offset() {
        return window_move$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct WindowMoveEvent window_move
     * }
     */
    public static MemorySegment window_move(MemorySegment struct) {
        return struct.asSlice(window_move$OFFSET, window_move$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct WindowMoveEvent window_move
     * }
     */
    public static void window_move(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, window_move$OFFSET, window_move$LAYOUT.byteSize());
    }

    private static final GroupLayout window_focus_change$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$144:5"), groupElement("window_focus_change"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct WindowFocusChangeEvent window_focus_change
     * }
     */
    public static final GroupLayout window_focus_change$layout() {
        return window_focus_change$LAYOUT;
    }

    private static final long window_focus_change$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct WindowFocusChangeEvent window_focus_change
     * }
     */
    public static final long window_focus_change$offset() {
        return window_focus_change$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct WindowFocusChangeEvent window_focus_change
     * }
     */
    public static MemorySegment window_focus_change(MemorySegment struct) {
        return struct.asSlice(window_focus_change$OFFSET, window_focus_change$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct WindowFocusChangeEvent window_focus_change
     * }
     */
    public static void window_focus_change(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, window_focus_change$OFFSET, window_focus_change$LAYOUT.byteSize());
    }

    private static final GroupLayout window_close_request$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$147:5"), groupElement("window_close_request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct WindowCloseRequestEvent window_close_request
     * }
     */
    public static final GroupLayout window_close_request$layout() {
        return window_close_request$LAYOUT;
    }

    private static final long window_close_request$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct WindowCloseRequestEvent window_close_request
     * }
     */
    public static final long window_close_request$offset() {
        return window_close_request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct WindowCloseRequestEvent window_close_request
     * }
     */
    public static MemorySegment window_close_request(MemorySegment struct) {
        return struct.asSlice(window_close_request$OFFSET, window_close_request$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct WindowCloseRequestEvent window_close_request
     * }
     */
    public static void window_close_request(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, window_close_request$OFFSET, window_close_request$LAYOUT.byteSize());
    }

    private static final GroupLayout window_full_screen_toggle$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$122:3"), groupElement("$anon$150:5"), groupElement("window_full_screen_toggle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct WindowFullScreenToggleEvent window_full_screen_toggle
     * }
     */
    public static final GroupLayout window_full_screen_toggle$layout() {
        return window_full_screen_toggle$LAYOUT;
    }

    private static final long window_full_screen_toggle$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct WindowFullScreenToggleEvent window_full_screen_toggle
     * }
     */
    public static final long window_full_screen_toggle$offset() {
        return window_full_screen_toggle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct WindowFullScreenToggleEvent window_full_screen_toggle
     * }
     */
    public static MemorySegment window_full_screen_toggle(MemorySegment struct) {
        return struct.asSlice(window_full_screen_toggle$OFFSET, window_full_screen_toggle$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct WindowFullScreenToggleEvent window_full_screen_toggle
     * }
     */
    public static void window_full_screen_toggle(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, window_full_screen_toggle$OFFSET, window_full_screen_toggle$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

