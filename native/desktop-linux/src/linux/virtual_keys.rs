use desktop_common::logger::PanicDefault;
use enumflags2::BitFlags;
use log::debug;

use crate::linux::{
    events::{KeyCode, KeyModifier, KeyModifierBitflag},
    keyboard::KeymapKey,
};

#[derive(Debug, Clone, Copy, Eq, PartialEq)]
#[repr(C)]
pub enum VirtualKey {
    Home,
    Back,
    _0,
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    Clear,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Comma,
    Period,
    AltLeft,
    AltRight,
    ShiftLeft,
    ShiftRight,
    Tab,
    Space,
    Enter,
    BackSpace,
    Grave,
    Minus,
    Equals,
    LeftBracket,
    RightBracket,
    Backslash,
    Semicolon,
    Apostrophe,
    Slash,
    // Plus,
    Menu,
    Search,
    PageUp,
    PageDown,
    Pictsymbols,
    Escape,
    Delete,
    CtrlLeft,
    CtrlRight,
    CapsLock,
    ScrollLock,
    MetaLeft,
    MetaRight,
    Sysrq,
    Break,
    MoveHome,
    MoveEnd,
    Insert,
    Forward,
    F1,
    F2,
    F10,
    F11,
    F12,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    NumLock,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadDivide,
    NumpadMultiply,
    NumpadSubtract,
    NumpadAdd,
    NumpadDot,
    NumpadComma,
    NumpadEnter,
    NumpadEquals,
    NumpadLeftParen,
    NumpadRightParen,
    ZoomIn,
    ZoomOut,
    Settings,
    ZenkakuHankaku,
    Eisu,
    Muhenkan,
    Henkan,
    KatakanaHiragana,
    Yen,
    Ro,
    Kana,
    Cut,
    Copy,
    Paste,
    Up,
    Down,
    Left,
    Right,
    Refresh,
    EmojiPicker,
    New,
    Close,
    Print,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    Unknown, // keep as the last entry
}

#[allow(non_camel_case_types, clippy::upper_case_acronyms)]
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
#[repr(u32)]
pub enum KeyCodes {
    Escape = 1,
    _1 = 2,
    _2 = 3,
    _3 = 4,
    _4 = 5,
    _5 = 6,
    _6 = 7,
    _7 = 8,
    _8 = 9,
    _9 = 10,
    _0 = 11,
    MINUS = 12,
    EQUAL = 13,
    BACKSPACE = 14,
    TAB = 15,
    Q = 16,
    W = 17,
    E = 18,
    R = 19,
    T = 20,
    Y = 21,
    U = 22,
    I = 23,
    O = 24,
    P = 25,
    LEFTBRACE = 26,
    RIGHTBRACE = 27,
    ENTER = 28,
    LEFTCTRL = 29,
    A = 30,
    S = 31,
    D = 32,
    F = 33,
    G = 34,
    H = 35,
    J = 36,
    K = 37,
    L = 38,
    SEMICOLON = 39,
    APOSTROPHE = 40,
    GRAVE = 41,
    LEFTSHIFT = 42,
    BACKSLASH = 43,
    Z = 44,
    X = 45,
    C = 46,
    V = 47,
    B = 48,
    N = 49,
    M = 50,
    COMMA = 51,
    DOT = 52,
    SLASH = 53,
    RIGHTSHIFT = 54,
    KPASTERISK = 55,
    LEFTALT = 56,
    SPACE = 57,
    CAPSLOCK = 58,
    F1 = 59,
    F2 = 60,
    F3 = 61,
    F4 = 62,
    F5 = 63,
    F6 = 64,
    F7 = 65,
    F8 = 66,
    F9 = 67,
    F10 = 68,
    NUMLOCK = 69,
    SCROLLLOCK = 70,
    KP7 = 71,
    KP8 = 72,
    KP9 = 73,
    KPMINUS = 74,
    KP4 = 75,
    KP5 = 76,
    KP6 = 77,
    KPPLUS = 78,
    KP1 = 79,
    KP2 = 80,
    KP3 = 81,
    KP0 = 82,
    KPDOT = 83,
    ZENKAKUHANKAKU = 85,
    // LSGT_102ND = 86,
    F11 = 87,
    F12 = 88,
    RO = 89,
    // KATAKANA = 90,
    // HIRAGANA = 91,
    HENKAN = 92,
    KATAKANAHIRAGANA = 93,
    MUHENKAN = 94,
    // KPJPCOMMA = 95,
    KPENTER = 96,
    RIGHTCTRL = 97,
    KPSLASH = 98,
    SYSRQ = 99,
    RIGHTALT = 100,
    // LINEFEED = 101,
    HOME = 102,
    UP = 103,
    PAGEUP = 104,
    LEFT = 105,
    RIGHT = 106,
    END = 107,
    DOWN = 108,
    PAGEDOWN = 109,
    INSERT = 110,
    DELETE = 111,
    KPEQUAL = 117,
    // KPPLUSMINUS	 = 118,
    PAUSE = 119,
    KPCOMMA = 121,
    HANGUEL = 122,
    HANJA = 123,
    YEN = 124,
    LEFTMETA = 125,
    RIGHTMETA = 126,
    COMPOSE = 127,
    COPY = 133,
    PASTE = 135,
    CUT = 137,
    BACK = 158,
    FORWARD = 159,
    REFRESH = 173,
    KPLEFTPAREN = 179,
    KPRIGHTPAREN = 180,
    NEW = 181,
    F13 = 183,
    F14 = 184,
    F15 = 185,
    F16 = 186,
    F17 = 187,
    F18 = 188,
    F19 = 189,
    F20 = 190,
    F21 = 191,
    F22 = 192,
    F23 = 193,
    F24 = 194,
    CLOSE = 206,
    PRINT = 210,
    SEARCH = 217,
    CLEAR = 0x163,
    ZOOMIN = 0x1a2,
    ZOOMOUT = 0x1a3,
}

impl KeyCodes {
    #[must_use]
    pub const fn to_keycode(self) -> KeyCode {
        KeyCode(self as u32)
    }
}

const MAPPING: [(VirtualKey, xkeysym::Keysym, KeyCode); 142] = [
    (VirtualKey::_0, xkeysym::Keysym::_0, KeyCodes::_0.to_keycode()),
    (VirtualKey::_1, xkeysym::Keysym::_1, KeyCodes::_1.to_keycode()),
    (VirtualKey::_2, xkeysym::Keysym::_2, KeyCodes::_2.to_keycode()),
    (VirtualKey::_3, xkeysym::Keysym::_3, KeyCodes::_3.to_keycode()),
    (VirtualKey::_4, xkeysym::Keysym::_4, KeyCodes::_4.to_keycode()),
    (VirtualKey::_5, xkeysym::Keysym::_5, KeyCodes::_5.to_keycode()),
    (VirtualKey::_6, xkeysym::Keysym::_6, KeyCodes::_6.to_keycode()),
    (VirtualKey::_7, xkeysym::Keysym::_7, KeyCodes::_7.to_keycode()),
    (VirtualKey::_8, xkeysym::Keysym::_8, KeyCodes::_8.to_keycode()),
    (VirtualKey::_9, xkeysym::Keysym::_9, KeyCodes::_9.to_keycode()),
    (VirtualKey::A, xkeysym::Keysym::a, KeyCodes::A.to_keycode()),
    (VirtualKey::B, xkeysym::Keysym::b, KeyCodes::B.to_keycode()),
    (VirtualKey::C, xkeysym::Keysym::c, KeyCodes::C.to_keycode()),
    (VirtualKey::D, xkeysym::Keysym::d, KeyCodes::D.to_keycode()),
    (VirtualKey::E, xkeysym::Keysym::e, KeyCodes::E.to_keycode()),
    (VirtualKey::F, xkeysym::Keysym::f, KeyCodes::F.to_keycode()),
    (VirtualKey::G, xkeysym::Keysym::g, KeyCodes::G.to_keycode()),
    (VirtualKey::H, xkeysym::Keysym::h, KeyCodes::H.to_keycode()),
    (VirtualKey::I, xkeysym::Keysym::i, KeyCodes::I.to_keycode()),
    (VirtualKey::J, xkeysym::Keysym::j, KeyCodes::J.to_keycode()),
    (VirtualKey::K, xkeysym::Keysym::k, KeyCodes::K.to_keycode()),
    (VirtualKey::L, xkeysym::Keysym::l, KeyCodes::L.to_keycode()),
    (VirtualKey::M, xkeysym::Keysym::m, KeyCodes::M.to_keycode()),
    (VirtualKey::N, xkeysym::Keysym::n, KeyCodes::N.to_keycode()),
    (VirtualKey::O, xkeysym::Keysym::o, KeyCodes::O.to_keycode()),
    (VirtualKey::P, xkeysym::Keysym::p, KeyCodes::P.to_keycode()),
    (VirtualKey::Q, xkeysym::Keysym::q, KeyCodes::Q.to_keycode()),
    (VirtualKey::R, xkeysym::Keysym::r, KeyCodes::R.to_keycode()),
    (VirtualKey::S, xkeysym::Keysym::s, KeyCodes::S.to_keycode()),
    (VirtualKey::T, xkeysym::Keysym::t, KeyCodes::T.to_keycode()),
    (VirtualKey::U, xkeysym::Keysym::u, KeyCodes::U.to_keycode()),
    (VirtualKey::V, xkeysym::Keysym::v, KeyCodes::V.to_keycode()),
    (VirtualKey::W, xkeysym::Keysym::w, KeyCodes::W.to_keycode()),
    (VirtualKey::X, xkeysym::Keysym::x, KeyCodes::X.to_keycode()),
    (VirtualKey::Y, xkeysym::Keysym::y, KeyCodes::Y.to_keycode()),
    (VirtualKey::Z, xkeysym::Keysym::z, KeyCodes::Z.to_keycode()),
    (VirtualKey::AltLeft, xkeysym::Keysym::Alt_L, KeyCodes::LEFTALT.to_keycode()),
    (VirtualKey::AltRight, xkeysym::Keysym::Alt_R, KeyCodes::RIGHTALT.to_keycode()),
    (
        VirtualKey::Apostrophe,
        xkeysym::Keysym::apostrophe,
        KeyCodes::APOSTROPHE.to_keycode(),
    ),
    (VirtualKey::Back, xkeysym::Keysym::XF86_Back, KeyCodes::BACK.to_keycode()),
    (VirtualKey::Backslash, xkeysym::Keysym::backslash, KeyCodes::BACKSLASH.to_keycode()),
    (VirtualKey::Break, xkeysym::Keysym::Break, KeyCodes::PAUSE.to_keycode()),
    (VirtualKey::CapsLock, xkeysym::Keysym::Caps_Lock, KeyCodes::CAPSLOCK.to_keycode()),
    (VirtualKey::Clear, xkeysym::Keysym::Clear, KeyCodes::CLEAR.to_keycode()),
    (VirtualKey::Close, xkeysym::Keysym::XF86_Close, KeyCodes::CLOSE.to_keycode()),
    (VirtualKey::Comma, xkeysym::Keysym::comma, KeyCodes::COMMA.to_keycode()),
    (VirtualKey::Copy, xkeysym::Keysym::XF86_Copy, KeyCodes::COPY.to_keycode()),
    (VirtualKey::CtrlLeft, xkeysym::Keysym::Control_L, KeyCodes::LEFTCTRL.to_keycode()),
    (VirtualKey::CtrlRight, xkeysym::Keysym::Control_R, KeyCodes::RIGHTCTRL.to_keycode()),
    (VirtualKey::Cut, xkeysym::Keysym::XF86_Cut, KeyCodes::CUT.to_keycode()),
    (VirtualKey::BackSpace, xkeysym::Keysym::BackSpace, KeyCodes::BACKSPACE.to_keycode()),
    (VirtualKey::Eisu, xkeysym::Keysym::Eisu_Shift, KeyCodes::HANJA.to_keycode()),
    (VirtualKey::Enter, xkeysym::Keysym::Return, KeyCodes::ENTER.to_keycode()),
    (VirtualKey::Equals, xkeysym::Keysym::equal, KeyCodes::EQUAL.to_keycode()),
    (VirtualKey::Escape, xkeysym::Keysym::Escape, KeyCodes::Escape.to_keycode()),
    (VirtualKey::Delete, xkeysym::Keysym::Delete, KeyCodes::DELETE.to_keycode()),
    (VirtualKey::F1, xkeysym::Keysym::F1, KeyCodes::F1.to_keycode()),
    (VirtualKey::F2, xkeysym::Keysym::F2, KeyCodes::F2.to_keycode()),
    (VirtualKey::F3, xkeysym::Keysym::F3, KeyCodes::F3.to_keycode()),
    (VirtualKey::F4, xkeysym::Keysym::F4, KeyCodes::F4.to_keycode()),
    (VirtualKey::F5, xkeysym::Keysym::F5, KeyCodes::F5.to_keycode()),
    (VirtualKey::F6, xkeysym::Keysym::F6, KeyCodes::F6.to_keycode()),
    (VirtualKey::F7, xkeysym::Keysym::F7, KeyCodes::F7.to_keycode()),
    (VirtualKey::F8, xkeysym::Keysym::F8, KeyCodes::F8.to_keycode()),
    (VirtualKey::F9, xkeysym::Keysym::F9, KeyCodes::F9.to_keycode()),
    (VirtualKey::F10, xkeysym::Keysym::F10, KeyCodes::F10.to_keycode()),
    (VirtualKey::F11, xkeysym::Keysym::F11, KeyCodes::F11.to_keycode()),
    (VirtualKey::F12, xkeysym::Keysym::F12, KeyCodes::F12.to_keycode()),
    (VirtualKey::F13, xkeysym::Keysym::F13, KeyCodes::F13.to_keycode()),
    (VirtualKey::F14, xkeysym::Keysym::F14, KeyCodes::F14.to_keycode()),
    (VirtualKey::F15, xkeysym::Keysym::F15, KeyCodes::F15.to_keycode()),
    (VirtualKey::F16, xkeysym::Keysym::F16, KeyCodes::F16.to_keycode()),
    (VirtualKey::F17, xkeysym::Keysym::F17, KeyCodes::F17.to_keycode()),
    (VirtualKey::F18, xkeysym::Keysym::F18, KeyCodes::F18.to_keycode()),
    (VirtualKey::F19, xkeysym::Keysym::F19, KeyCodes::F19.to_keycode()),
    (VirtualKey::F20, xkeysym::Keysym::F20, KeyCodes::F20.to_keycode()),
    (VirtualKey::F21, xkeysym::Keysym::F21, KeyCodes::F21.to_keycode()),
    (VirtualKey::F22, xkeysym::Keysym::F22, KeyCodes::F22.to_keycode()),
    (VirtualKey::F23, xkeysym::Keysym::F23, KeyCodes::F23.to_keycode()),
    (VirtualKey::F24, xkeysym::Keysym::F24, KeyCodes::F24.to_keycode()),
    (VirtualKey::Forward, xkeysym::Keysym::XF86_Forward, KeyCodes::FORWARD.to_keycode()),
    (VirtualKey::Grave, xkeysym::Keysym::grave, KeyCodes::GRAVE.to_keycode()),
    (VirtualKey::Henkan, xkeysym::Keysym::Henkan, KeyCodes::HENKAN.to_keycode()),
    (VirtualKey::Home, xkeysym::Keysym::Home, KeyCodes::HOME.to_keycode()),
    (VirtualKey::Insert, xkeysym::Keysym::Insert, KeyCodes::INSERT.to_keycode()),
    (VirtualKey::Kana, xkeysym::Keysym::Hangul, KeyCodes::HANGUEL.to_keycode()),
    (
        VirtualKey::KatakanaHiragana,
        xkeysym::Keysym::Hiragana_Katakana,
        KeyCodes::KATAKANAHIRAGANA.to_keycode(),
    ),
    (
        VirtualKey::LeftBracket,
        xkeysym::Keysym::bracketleft,
        KeyCodes::LEFTBRACE.to_keycode(),
    ),
    (VirtualKey::Menu, xkeysym::Keysym::Menu, KeyCodes::COMPOSE.to_keycode()),
    (VirtualKey::MetaLeft, xkeysym::Keysym::Meta_L, KeyCodes::LEFTMETA.to_keycode()),
    (VirtualKey::MetaRight, xkeysym::Keysym::Meta_R, KeyCodes::RIGHTMETA.to_keycode()),
    (VirtualKey::Minus, xkeysym::Keysym::minus, KeyCodes::MINUS.to_keycode()),
    (VirtualKey::MoveEnd, xkeysym::Keysym::End, KeyCodes::END.to_keycode()),
    (VirtualKey::MoveHome, xkeysym::Keysym::Home, KeyCodes::HOME.to_keycode()),
    (VirtualKey::Muhenkan, xkeysym::Keysym::Muhenkan, KeyCodes::MUHENKAN.to_keycode()),
    (VirtualKey::New, xkeysym::Keysym::XF86_New, KeyCodes::NEW.to_keycode()),
    (VirtualKey::Numpad0, xkeysym::Keysym::KP_0, KeyCodes::KP0.to_keycode()),
    (VirtualKey::Numpad1, xkeysym::Keysym::KP_1, KeyCodes::KP1.to_keycode()),
    (VirtualKey::Numpad2, xkeysym::Keysym::KP_2, KeyCodes::KP2.to_keycode()),
    (VirtualKey::Numpad3, xkeysym::Keysym::KP_3, KeyCodes::KP3.to_keycode()),
    (VirtualKey::Numpad4, xkeysym::Keysym::KP_4, KeyCodes::KP4.to_keycode()),
    (VirtualKey::Numpad5, xkeysym::Keysym::KP_5, KeyCodes::KP5.to_keycode()),
    (VirtualKey::Numpad6, xkeysym::Keysym::KP_6, KeyCodes::KP6.to_keycode()),
    (VirtualKey::Numpad7, xkeysym::Keysym::KP_7, KeyCodes::KP7.to_keycode()),
    (VirtualKey::Numpad8, xkeysym::Keysym::KP_8, KeyCodes::KP8.to_keycode()),
    (VirtualKey::Numpad9, xkeysym::Keysym::KP_9, KeyCodes::KP9.to_keycode()),
    (VirtualKey::NumpadAdd, xkeysym::Keysym::KP_Add, KeyCodes::KPPLUS.to_keycode()),
    (
        VirtualKey::NumpadComma,
        xkeysym::Keysym::KP_Separator,
        KeyCodes::KPCOMMA.to_keycode(),
    ),
    (VirtualKey::NumpadDivide, xkeysym::Keysym::KP_Divide, KeyCodes::KPSLASH.to_keycode()),
    (VirtualKey::NumpadDot, xkeysym::Keysym::KP_Decimal, KeyCodes::KPDOT.to_keycode()),
    (VirtualKey::NumpadEnter, xkeysym::Keysym::KP_Enter, KeyCodes::KPENTER.to_keycode()),
    (VirtualKey::NumpadEquals, xkeysym::Keysym::KP_Equal, KeyCodes::KPEQUAL.to_keycode()),
    (
        VirtualKey::NumpadLeftParen,
        xkeysym::Keysym::parenleft,
        KeyCodes::KPLEFTPAREN.to_keycode(),
    ),
    (
        VirtualKey::NumpadMultiply,
        xkeysym::Keysym::KP_Multiply,
        KeyCodes::KPASTERISK.to_keycode(),
    ),
    (
        VirtualKey::NumpadRightParen,
        xkeysym::Keysym::parenright,
        KeyCodes::KPRIGHTPAREN.to_keycode(),
    ),
    (
        VirtualKey::NumpadSubtract,
        xkeysym::Keysym::KP_Subtract,
        KeyCodes::KPMINUS.to_keycode(),
    ),
    (VirtualKey::NumLock, xkeysym::Keysym::Num_Lock, KeyCodes::NUMLOCK.to_keycode()),
    (VirtualKey::PageDown, xkeysym::Keysym::Page_Down, KeyCodes::PAGEDOWN.to_keycode()),
    (VirtualKey::PageUp, xkeysym::Keysym::Page_Up, KeyCodes::PAGEUP.to_keycode()),
    (VirtualKey::Paste, xkeysym::Keysym::XF86_Paste, KeyCodes::PASTE.to_keycode()),
    (VirtualKey::Period, xkeysym::Keysym::period, KeyCodes::DOT.to_keycode()),
    // (VirtualKey::Plus, xkeysym::Keysym::plus, KeyCodes::.into()),
    (VirtualKey::Print, xkeysym::Keysym::Print, KeyCodes::PRINT.to_keycode()),
    (VirtualKey::Refresh, xkeysym::Keysym::XF86_Refresh, KeyCodes::REFRESH.to_keycode()),
    (
        VirtualKey::RightBracket,
        xkeysym::Keysym::bracketright,
        KeyCodes::RIGHTBRACE.to_keycode(),
    ),
    (VirtualKey::Ro, xkeysym::Keysym::kana_RO, KeyCodes::RO.to_keycode()),
    (
        VirtualKey::ScrollLock,
        xkeysym::Keysym::Scroll_Lock,
        KeyCodes::SCROLLLOCK.to_keycode(),
    ),
    (VirtualKey::Search, xkeysym::Keysym::XF86_Search, KeyCodes::SEARCH.to_keycode()),
    (VirtualKey::Semicolon, xkeysym::Keysym::semicolon, KeyCodes::SEMICOLON.to_keycode()),
    (VirtualKey::ShiftLeft, xkeysym::Keysym::Shift_L, KeyCodes::LEFTSHIFT.to_keycode()),
    (VirtualKey::ShiftRight, xkeysym::Keysym::Shift_R, KeyCodes::RIGHTSHIFT.to_keycode()),
    (VirtualKey::Slash, xkeysym::Keysym::slash, KeyCodes::SLASH.to_keycode()),
    (VirtualKey::Space, xkeysym::Keysym::space, KeyCodes::SPACE.to_keycode()),
    (VirtualKey::Sysrq, xkeysym::Keysym::Sys_Req, KeyCodes::SYSRQ.to_keycode()),
    (VirtualKey::Down, xkeysym::Keysym::Down, KeyCodes::DOWN.to_keycode()),
    (VirtualKey::Left, xkeysym::Keysym::Left, KeyCodes::LEFT.to_keycode()),
    (VirtualKey::Right, xkeysym::Keysym::Right, KeyCodes::RIGHT.to_keycode()),
    (VirtualKey::Up, xkeysym::Keysym::Up, KeyCodes::UP.to_keycode()),
    (VirtualKey::Tab, xkeysym::Keysym::Tab, KeyCodes::TAB.to_keycode()),
    (VirtualKey::Yen, xkeysym::Keysym::yen, KeyCodes::YEN.to_keycode()),
    (
        VirtualKey::ZenkakuHankaku,
        xkeysym::Keysym::Zenkaku_Hankaku,
        KeyCodes::ZENKAKUHANKAKU.to_keycode(),
    ),
    (VirtualKey::ZoomIn, xkeysym::Keysym::XF86_ZoomIn, KeyCodes::ZOOMIN.to_keycode()),
    (VirtualKey::ZoomOut, xkeysym::Keysym::XF86_ZoomOut, KeyCodes::ZOOMOUT.to_keycode()),
];

const fn lowercase_ascii_char_keysym(keysym: xkeysym::Keysym) -> xkeysym::Keysym {
    match keysym {
        xkeysym::Keysym::A => xkeysym::Keysym::a,
        xkeysym::Keysym::B => xkeysym::Keysym::b,
        xkeysym::Keysym::C => xkeysym::Keysym::c,
        xkeysym::Keysym::D => xkeysym::Keysym::d,
        xkeysym::Keysym::E => xkeysym::Keysym::e,
        xkeysym::Keysym::F => xkeysym::Keysym::f,
        xkeysym::Keysym::G => xkeysym::Keysym::g,
        xkeysym::Keysym::H => xkeysym::Keysym::h,
        xkeysym::Keysym::I => xkeysym::Keysym::i,
        xkeysym::Keysym::J => xkeysym::Keysym::j,
        xkeysym::Keysym::K => xkeysym::Keysym::k,
        xkeysym::Keysym::L => xkeysym::Keysym::l,
        xkeysym::Keysym::M => xkeysym::Keysym::m,
        xkeysym::Keysym::N => xkeysym::Keysym::n,
        xkeysym::Keysym::O => xkeysym::Keysym::o,
        xkeysym::Keysym::P => xkeysym::Keysym::p,
        xkeysym::Keysym::Q => xkeysym::Keysym::q,
        xkeysym::Keysym::R => xkeysym::Keysym::r,
        xkeysym::Keysym::S => xkeysym::Keysym::s,
        xkeysym::Keysym::T => xkeysym::Keysym::t,
        xkeysym::Keysym::U => xkeysym::Keysym::u,
        xkeysym::Keysym::V => xkeysym::Keysym::v,
        xkeysym::Keysym::W => xkeysym::Keysym::w,
        xkeysym::Keysym::X => xkeysym::Keysym::x,
        xkeysym::Keysym::Y => xkeysym::Keysym::y,
        xkeysym::Keysym::Z => xkeysym::Keysym::z,
        _ => keysym,
    }
}

impl VirtualKey {
    #[must_use]
    pub fn new(keysym: xkeysym::Keysym, keycode: KeyCode, _keymap_keys: &[KeymapKey], _xkb_current_layout: u32) -> Self {
        let keysym = lowercase_ascii_char_keysym(keysym);
        MAPPING
            .iter()
            .find(|&it| keysym == it.1)
            .or_else(|| MAPPING.iter().find(|&it| keycode == it.2))
            .map_or(Self::Unknown, |it| it.0)
    }
}

#[derive(Debug, Clone, Copy, Eq, PartialEq)]
#[repr(C)]
pub struct MappingResult {
    pub modifiers_to_listen: KeyModifierBitflag,
    pub vk_to_listen: VirtualKey,
    pub char_to_display: u32,
}

impl PanicDefault for MappingResult {
    fn default() -> Self {
        Self {
            modifiers_to_listen: KeyModifierBitflag(0),
            vk_to_listen: VirtualKey::Unknown,
            char_to_display: 0,
        }
    }
}

fn xkb_level_to_modifiers(level: u32) -> BitFlags<KeyModifier> {
    debug!("xkb_level_to_modifiers for level {level}");
    match level {
        1 => KeyModifier::Shift.into(),
        2 => KeyModifier::Ctrl | KeyModifier::Alt,
        3 => KeyModifier::Ctrl | KeyModifier::Alt | KeyModifier::Shift,
        _ => BitFlags::EMPTY,
    }
}

#[must_use]
pub fn get_vk_mapping(modifiers: KeyModifierBitflag, ascii_key: u32, keymap_keys: &[KeymapKey], xkb_current_layout: u32) -> MappingResult {
    debug!("get_vk_mapping for {ascii_key}");
    if let Some(keymap_key) = keymap_keys
        .iter()
        .find(|&e| e.layout == xkb_current_layout && e.char_u32 == ascii_key)
    {
        if let Some(res) = keymap_keys
            .iter()
            .find(|&e| e.layout == xkb_current_layout && e.keycode == keymap_key.keycode && e.level == 0)
        {
            debug!("get_vk_mapping returning based on character");
            return MappingResult {
                modifiers_to_listen: KeyModifierBitflag(modifiers.0 | xkb_level_to_modifiers(keymap_key.level).bits_c()),
                vk_to_listen: VirtualKey::new(res.keysym, res.keycode, keymap_keys, xkb_current_layout),
                char_to_display: res.char_u32,
            };
        }
    }

    for (mapping_vk, mapping_keysym, mapping_keycode) in MAPPING {
        if mapping_keysym.raw() == ascii_key {
            for keymap_key in keymap_keys {
                if keymap_key.layout == xkb_current_layout && keymap_key.keycode == mapping_keycode {
                    debug!("get_vk_mapping returning based on keycode");
                    return MappingResult {
                        modifiers_to_listen: KeyModifierBitflag(modifiers.0 | xkb_level_to_modifiers(keymap_key.level).bits_c()),
                        vk_to_listen: mapping_vk,
                        char_to_display: keymap_key.char_u32,
                    };
                }
            }

            return MappingResult {
                modifiers_to_listen: modifiers,
                vk_to_listen: mapping_vk,
                char_to_display: ascii_key,
            };
        }
    }

    panic!("Invalid ascii_key value: {ascii_key}");
}
