use std::ffi::CString;

use anyhow::{bail, Context, Error, Ok};
use log::{error, info};
use num_derive::{FromPrimitive, ToPrimitive};
use num_traits::FromPrimitive;
use objc2::rc::{autoreleasepool, Retained};
use objc2_app_kit::{NSEvent, NSEventModifierFlags, NSEventType};
use objc2_foundation::NSString;

#[derive(Debug)]
pub(crate) struct KeyEventInfo {
    pub(crate) is_press: bool,
    pub(crate) is_repeat: bool,

    // Represents physical key location
    // Isn't affected by keyboard layout, locale and pressed modifiers
    pub(crate) code: KeyCode,

    // Roughly speaking it's a text that will be generated by this key press
    // It's affected by keyboard layout locale and pressed modifiers
    // It may contain codepoint constants listed in this file,
    // e.g. for F1 it will be value of `NSF1FunctionKey` constant
    // For dead keys it will be empty
    pub(crate) chars: CString,

    // Can be considered as a name of the key
    // Depends on keyboard layout but ignores modifiers
    // For keys that depend on keyboard layout it will be the symbol typed for default layer
    // For functional keys it will try to produce some meaningful codepoint, but not the same as for `characters`
    // For dead keys it will produce text from deafult layer
    pub(crate) key: CString
}

// todo unpack modifiers
pub(crate) fn unpack_key_event(ns_event: &NSEvent) -> anyhow::Result<KeyEventInfo> {
    autoreleasepool(|pool| {
        let is_press = match unsafe { ns_event.r#type() } {
            NSEventType::KeyDown => true,
            NSEventType::KeyUp => false,
            _ => bail!("Unexpected type of event {:?}", ns_event)
        };

        let is_repeat = unsafe { ns_event.isARepeat() };
        let code = unsafe { ns_event.keyCode() };

        let chars = unsafe { ns_event.characters() }.with_context(|| {
            format!("No characters field in {ns_event:?}")
        })?;

        let key = unsafe {
            ns_event.charactersByApplyingModifiers(NSEventModifierFlags::empty())
        }.with_context(|| { format!("Event contains invalid data: {ns_event:?}") })?;

        // though we apply the same modifiers, it's not the same as characters
        // there are number of differences:
        // * for dead keys `characters` will be empty, but this string will contain symbol representing the key
        // * for for keys like F1..F12 characters will contain codepoints from private use area defined in `KeyCodePoints`,
        // but this function will try to return some meaniingful code points
        // * for all F1..F16 keys this function will return the same codepoint: \u{10} for F17 it will be empty line
//        let _with_modifiers = unsafe {
//            ns_event.charactersByApplyingModifiers(ns_event.modifierFlags())
//        }.with_context(|| { format!("Event contains invalid data: {ns_event:?}") })?;

        let code = KeyCode::from_u16(code).with_context(|| { format!("Event with unexpected key code: {ns_event:?}") })?;
        let chars = CString::new(chars.as_str(pool)).with_context(|| format!("{chars:?}"))?;
        let chars = CString::new(chars.as_str(pool)).with_context(|| format!("{chars:?}"))?;
        let key = KeyEventInfo {
            is_press,
            is_repeat,
            code,
            chars,
    //        no_modifiers,
    //        with_modifiers
        };
        Ok(key)
    });
}

pub const NSEnterCharacter: u32                = 0x0003;
pub const NSBackspaceCharacter: u32            = 0x0008;
pub const NSTabCharacter: u32                  = 0x0009;
pub const NSNewlineCharacter: u32              = 0x000a;
pub const NSFormFeedCharacter: u32             = 0x000c;
pub const NSCarriageReturnCharacter: u32       = 0x000d;
pub const NSBackTabCharacter: u32              = 0x0019;
pub const NSDeleteCharacter: u32               = 0x007f;
pub const NSLineSeparatorCharacter: u32        = 0x2028;
pub const NSParagraphSeparatorCharacter: u32   = 0x2029;

pub const NSUpArrowFunctionKey: u32 = 0xF700;
pub const NSDownArrowFunctionKey: u32 = 0xF701;
pub const NSLeftArrowFunctionKey: u32 = 0xF702;
pub const NSRightArrowFunctionKey: u32 = 0xF703;
pub const NSF1FunctionKey: u32 = 0xF704;
pub const NSF2FunctionKey: u32 = 0xF705;
pub const NSF3FunctionKey: u32 = 0xF706;
pub const NSF4FunctionKey: u32 = 0xF707;
pub const NSF5FunctionKey: u32 = 0xF708;
pub const NSF6FunctionKey: u32 = 0xF709;
pub const NSF7FunctionKey: u32 = 0xF70A;
pub const NSF8FunctionKey: u32 = 0xF70B;
pub const NSF9FunctionKey: u32 = 0xF70C;
pub const NSF10FunctionKey: u32 = 0xF70D;
pub const NSF11FunctionKey: u32 = 0xF70E;
pub const NSF12FunctionKey: u32 = 0xF70F;
pub const NSF13FunctionKey: u32 = 0xF710;
pub const NSF14FunctionKey: u32 = 0xF711;
pub const NSF15FunctionKey: u32 = 0xF712;
pub const NSF16FunctionKey: u32 = 0xF713;
pub const NSF17FunctionKey: u32 = 0xF714;
pub const NSF18FunctionKey: u32 = 0xF715;
pub const NSF19FunctionKey: u32 = 0xF716;
pub const NSF20FunctionKey: u32 = 0xF717;
pub const NSF21FunctionKey: u32 = 0xF718;
pub const NSF22FunctionKey: u32 = 0xF719;
pub const NSF23FunctionKey: u32 = 0xF71A;
pub const NSF24FunctionKey: u32 = 0xF71B;
pub const NSF25FunctionKey: u32 = 0xF71C;
pub const NSF26FunctionKey: u32 = 0xF71D;
pub const NSF27FunctionKey: u32 = 0xF71E;
pub const NSF28FunctionKey: u32 = 0xF71F;
pub const NSF29FunctionKey: u32 = 0xF720;
pub const NSF30FunctionKey: u32 = 0xF721;
pub const NSF31FunctionKey: u32 = 0xF722;
pub const NSF32FunctionKey: u32 = 0xF723;
pub const NSF33FunctionKey: u32 = 0xF724;
pub const NSF34FunctionKey: u32 = 0xF725;
pub const NSF35FunctionKey: u32 = 0xF726;
pub const NSInsertFunctionKey: u32 = 0xF727;
pub const NSDeleteFunctionKey: u32 = 0xF728;
pub const NSHomeFunctionKey: u32 = 0xF729;
pub const NSBeginFunctionKey: u32 = 0xF72A;
pub const NSEndFunctionKey: u32 = 0xF72B;
pub const NSPageUpFunctionKey: u32 = 0xF72C;
pub const NSPageDownFunctionKey: u32 = 0xF72D;
pub const NSPrintScreenFunctionKey: u32 = 0xF72E;
pub const NSScrollLockFunctionKey: u32 = 0xF72F;
pub const NSPauseFunctionKey: u32 = 0xF730;
pub const NSSysReqFunctionKey: u32 = 0xF731;
pub const NSBreakFunctionKey: u32 = 0xF732;
pub const NSResetFunctionKey: u32 = 0xF733;
pub const NSStopFunctionKey: u32 = 0xF734;
pub const NSMenuFunctionKey: u32 = 0xF735;
pub const NSUserFunctionKey: u32 = 0xF736;
pub const NSSystemFunctionKey: u32 = 0xF737;
pub const NSPrintFunctionKey: u32 = 0xF738;
pub const NSClearLineFunctionKey: u32 = 0xF739;
pub const NSClearDisplayFunctionKey: u32 = 0xF73A;
pub const NSInsertLineFunctionKey: u32 = 0xF73B;
pub const NSDeleteLineFunctionKey: u32 = 0xF73C;
pub const NSInsertCharFunctionKey: u32 = 0xF73D;
pub const NSDeleteCharFunctionKey: u32 = 0xF73E;
pub const NSPrevFunctionKey: u32 = 0xF73F;
pub const NSNextFunctionKey: u32 = 0xF740;
pub const NSSelectFunctionKey: u32 = 0xF741;
pub const NSExecuteFunctionKey: u32 = 0xF742;
pub const NSUndoFunctionKey: u32 = 0xF743;
pub const NSRedoFunctionKey: u32 = 0xF744;
pub const NSFindFunctionKey: u32 = 0xF745;
pub const NSHelpFunctionKey: u32 = 0xF746;
pub const NSModeSwitchFunctionKey: u32 = 0xF747;

/*  MacOSX15.2
 *  Summary:
 *    Virtual keycodes
 *
 *  Discussion:
 *    These constants are the virtual keycodes defined originally in
 *    Inside Mac Volume V, pg. V-191. They identify physical keys on a
 *    keyboard. Those constants with "ANSI" in the name are labeled
 *    according to the key position on an ANSI-standard US keyboard.
 *    For example, kVK_ANSI_A indicates the virtual keycode for the key
 *    with the letter 'A' in the US keyboard layout. Other keyboard
 *    layouts may have the 'A' key label on a different physical key;
 *    in this case, pressing 'A' will generate a different virtual
 *    keycode.
 */
#[derive(Debug, Clone, Copy, FromPrimitive, ToPrimitive)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub enum KeyCode {
    VK_ANSI_A                    = 0x00,
    VK_ANSI_S                    = 0x01,
    VK_ANSI_D                    = 0x02,
    VK_ANSI_F                    = 0x03,
    VK_ANSI_H                    = 0x04,
    VK_ANSI_G                    = 0x05,
    VK_ANSI_Z                    = 0x06,
    VK_ANSI_X                    = 0x07,
    VK_ANSI_C                    = 0x08,
    VK_ANSI_V                    = 0x09,
    VK_ANSI_B                    = 0x0B,
    VK_ANSI_Q                    = 0x0C,
    VK_ANSI_W                    = 0x0D,
    VK_ANSI_E                    = 0x0E,
    VK_ANSI_R                    = 0x0F,
    VK_ANSI_Y                    = 0x10,
    VK_ANSI_T                    = 0x11,
    VK_ANSI_1                    = 0x12,
    VK_ANSI_2                    = 0x13,
    VK_ANSI_3                    = 0x14,
    VK_ANSI_4                    = 0x15,
    VK_ANSI_6                    = 0x16,
    VK_ANSI_5                    = 0x17,
    VK_ANSI_Equal                = 0x18,
    VK_ANSI_9                    = 0x19,
    VK_ANSI_7                    = 0x1A,
    VK_ANSI_Minus                = 0x1B,
    VK_ANSI_8                    = 0x1C,
    VK_ANSI_0                    = 0x1D,
    VK_ANSI_RightBracket         = 0x1E,
    VK_ANSI_O                    = 0x1F,
    VK_ANSI_U                    = 0x20,
    VK_ANSI_LeftBracket          = 0x21,
    VK_ANSI_I                    = 0x22,
    VK_ANSI_P                    = 0x23,
    VK_ANSI_L                    = 0x25,
    VK_ANSI_J                    = 0x26,
    VK_ANSI_Quote                = 0x27,
    VK_ANSI_K                    = 0x28,
    VK_ANSI_Semicolon            = 0x29,
    VK_ANSI_Backslash            = 0x2A,
    VK_ANSI_Comma                = 0x2B,
    VK_ANSI_Slash                = 0x2C,
    VK_ANSI_N                    = 0x2D,
    VK_ANSI_M                    = 0x2E,
    VK_ANSI_Period               = 0x2F,
    VK_ANSI_Grave                = 0x32,
    VK_ANSI_KeypadDecimal        = 0x41,
    VK_ANSI_KeypadMultiply       = 0x43,
    VK_ANSI_KeypadPlus           = 0x45,
    VK_ANSI_KeypadClear          = 0x47,
    VK_ANSI_KeypadDivide         = 0x4B,
    VK_ANSI_KeypadEnter          = 0x4C,
    VK_ANSI_KeypadMinus          = 0x4E,
    VK_ANSI_KeypadEquals         = 0x51,
    VK_ANSI_Keypad0              = 0x52,
    VK_ANSI_Keypad1              = 0x53,
    VK_ANSI_Keypad2              = 0x54,
    VK_ANSI_Keypad3              = 0x55,
    VK_ANSI_Keypad4              = 0x56,
    VK_ANSI_Keypad5              = 0x57,
    VK_ANSI_Keypad6              = 0x58,
    VK_ANSI_Keypad7              = 0x59,
    VK_ANSI_Keypad8              = 0x5B,
    VK_ANSI_Keypad9              = 0x5C,

    /* keycodes for keys that are independent of keyboard layout*/
    VK_Return                    = 0x24,
    VK_Tab                       = 0x30,
    VK_Space                     = 0x31,
    VK_Delete                    = 0x33,
    VK_Escape                    = 0x35,
    VK_Command                   = 0x37,
    VK_Shift                     = 0x38,
    VK_CapsLock                  = 0x39,
    VK_Option                    = 0x3A,
    VK_Control                   = 0x3B,
    VK_RightCommand              = 0x36,
    VK_RightShift                = 0x3C,
    VK_RightOption               = 0x3D,
    VK_RightControl              = 0x3E,
    VK_Function                  = 0x3F,
    VK_F17                       = 0x40,
    VK_VolumeUp                  = 0x48,
    VK_VolumeDown                = 0x49,
    VK_Mute                      = 0x4A,
    VK_F18                       = 0x4F,
    VK_F19                       = 0x50,
    VK_F20                       = 0x5A,
    VK_F5                        = 0x60,
    VK_F6                        = 0x61,
    VK_F7                        = 0x62,
    VK_F3                        = 0x63,
    VK_F8                        = 0x64,
    VK_F9                        = 0x65,
    VK_F11                       = 0x67,
    VK_F13                       = 0x69,
    VK_F16                       = 0x6A,
    VK_F14                       = 0x6B,
    VK_F10                       = 0x6D,
    VK_ContextualMenu            = 0x6E,
    VK_F12                       = 0x6F,
    VK_F15                       = 0x71,
    VK_Help                      = 0x72,
    VK_Home                      = 0x73,
    VK_PageUp                    = 0x74,
    VK_ForwardDelete             = 0x75,
    VK_F4                        = 0x76,
    VK_End                       = 0x77,
    VK_F2                        = 0x78,
    VK_PageDown                  = 0x79,
    VK_F1                        = 0x7A,
    VK_LeftArrow                 = 0x7B,
    VK_RightArrow                = 0x7C,
    VK_DownArrow                 = 0x7D,
    VK_UpArrow                   = 0x7E,

    /* ISO keyboards only*/
    VK_ISO_Section               = 0x0A,

    VK_JIS_Yen                   = 0x5D,
    VK_JIS_Underscore            = 0x5E,
    VK_JIS_KeypadComma           = 0x5F,
    VK_JIS_Eisu                  = 0x66,
    VK_JIS_Kana                  = 0x68
}